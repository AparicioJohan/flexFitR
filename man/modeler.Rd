% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/02_modeler.R
\name{modeler}
\alias{modeler}
\title{Modeler HTP}
\usage{
modeler(
  data,
  x,
  y,
  grp,
  keep,
  id = NULL,
  fn = "fn_piwise",
  parameters = NULL,
  lower = -Inf,
  upper = Inf,
  initial_vals = NULL,
  fixed_params = NULL,
  method = c("subplex", "pracmanm", "anms"),
  return_method = FALSE,
  add_zero = FALSE,
  check_negative = FALSE,
  max_as_last = FALSE,
  n_points = 1000,
  max_x = NULL,
  progress = FALSE,
  parallel = FALSE,
  workers = max(1L, parallel::detectCores(), na.rm = TRUE),
  control = list()
)
}
\arguments{
\item{data}{A data.frame in a wide format.}

\item{x}{The name of the column in `data` that contains x points.}

\item{y}{The name of the column in `data` that contain the variable to be analyzed. Must match a var in the data.}

\item{grp}{The name of the column in `data` that contains a grouping variable. (Optional).}

\item{keep}{The names of the columns in `data` to keep across the analysis.}

\item{id}{An optional vector with levels of `grp` to filter the data. Default is \code{NULL}, meaning all groups are used.}

\item{fn}{A string specifying the name of the function to be used for the curve fitting. Default is \code{"fn_piwise"}.}

\item{parameters}{A named numeric vector specifying the initial values for the parameters to be optimized. Default is \code{NULL}.}

\item{lower}{Numeric vector specifying the lower bounds for the parameters. Default is \code{-Inf} for all parameters.}

\item{upper}{Numeric vector specifying the upper bounds for the parameters. Default is \code{Inf} for all parameters.}

\item{initial_vals}{A data frame with columns \code{uid}, and the initial parameter values for each group id. Used for providing specific initial values per group id.}

\item{fixed_params}{A data frame with columns \code{uid}, and the fixed parameter values for each group id. Used for fixing certain parameters during optimization.}

\item{method}{A character vector specifying the optimization methods to be used. See \code{optimx} package for available methods. Default is \code{c("subplex", "pracmanm", "anms")}.}

\item{return_method}{Logical. If \code{TRUE}, includes the optimization method used in the result. Default is \code{FALSE}.}

\item{add_zero}{Logical. If \code{TRUE}, adds a zero value to the series at the start. Default is \code{FALSE}.}

\item{check_negative}{Logical. If \code{TRUE}, converts negative values in the data to zero. Default is \code{FALSE}.}

\item{max_as_last}{Logical. If \code{TRUE}, appends the maximum value after reaching the maximum. Default is \code{FALSE}.}

\item{n_points}{An integer specifying the number of x points to use for approximating the Area Under the Curve (AUC). Default is \code{1000}.}

\item{max_x}{Numeric. The maximum x value to use for calculating the AUC. Default is \code{NULL}, which uses the last x value in the data.}

\item{progress}{Logical. If \code{TRUE} a progress bar is displayed. Default is \code{FALSE}. Try this before running the function: \code{progressr::handlers("progress", "beepr")}.}

\item{parallel}{Logical. If \code{TRUE} the model fit is performed in parallel. Default is \code{FALSE}.}

\item{workers}{The number of parallel processes to use. `parallel::detectCores()`}

\item{control}{A list of control parameters to be passed to the optimization function. For example: \code{list(maxit = 500)}.}
}
\value{
An object of class \code{modeler}, which is a list containing the following elements:
\describe{
  \item{\code{param}}{A data frame containing the optimized parameters and related information.}
  \item{\code{dt}}{A data frame with data used and fitted values.}
  \item{\code{fn}}{The call used to calculate the AUC.}
  \item{\code{metrics}}{Metrics and summary of the models.}
  \item{\code{max_x}}{Maximum x value used for calculating the AUC.}
  \item{\code{execution}}{Execution time.}
  \item{\code{response}}{Response variable.}
  \item{\code{keep}}{Metadata to keep across.}
  \item{\code{fun}}{Function being optimized}
  \item{\code{fit}}{List with the fitted models.}
}
}
\description{
General-purpose optimization for HTP data.
}
\examples{
library(exploreHTP)
data(dt_potato)
explorer <- explorer(dt_potato, x = DAP, y = c(Canopy, GLI_2), id = Plot)
# Example 1
mod_1 <- dt_potato |>
  modeler(
    x = DAP,
    y = GLI_2,
    grp = Plot,
    id = 195,
    fn = "fn_lin_pl_lin",
    parameters = c(t1 = 38.7, t2 = 62, t3 = 90, k = 0.32, beta = -0.01),
    add_zero = TRUE
  )
plot(mod_1, plot_id = 195)
print(mod_1)
# Example 2
mod_2 <- dt_potato |>
  modeler(
    x = DAP,
    y = Canopy,
    grp = Plot,
    id = 195,
    fn = "fn_piwise",
    parameters = c(t1 = 45, t2 = 80, k = 0.9),
    add_zero = TRUE,
    max_as_last = TRUE
  )
plot(mod_2, id = 195)
print(mod_2)
}
