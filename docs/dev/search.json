[{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/canopy-model.html","id":"modeling-plant-emergence-and-canopy-growth-using-uav-data","dir":"Articles","previous_headings":"","what":"Modeling plant emergence and canopy growth using UAV data","title":"Modeling","text":"vignette demonstrates piecewise regression using canopy data derived UAV imagery estimate two key parameters: t1: days plant emergence. t2: days reach maximum canopy. data University Wisconsin-Madison potato breeding program, specifically partially replicated experiment. UAV images collected 2020 processed 2024.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/canopy-model.html","id":"loading-libraries","dir":"Articles","previous_headings":"","what":"Loading libraries","title":"Modeling","text":"","code":"library(flexFitR) library(dplyr) library(kableExtra) library(ggpubr) library(purrr)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/canopy-model.html","id":"exploring-data","dir":"Articles","previous_headings":"","what":"1. Exploring data","title":"Modeling","text":"begin explorer function, provides basic statistical summaries descriptive statistics, well visualizations help understand temporal evolution plot.  see type plots visit plot.explorer().","code":"data(dt_potato) explorer <- explorer(dt_potato, x = DAP, y = Canopy, id = Plot) names(explorer) #> [1] \"summ_vars\"      \"summ_metadata\"  \"locals_min_max\" \"dt_long\"        #> [5] \"metadata\"       \"x_var\" p1 <- plot(explorer, type = \"evolution\", return_gg = TRUE, add_avg = TRUE) p2 <- plot(explorer, type = \"x_by_var\", return_gg = TRUE) ggarrange(p1, p2)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/canopy-model.html","id":"regression-function","dir":"Articles","previous_headings":"","what":"2. Regression Function","title":"Modeling","text":"data explored, define expectation function. case, piece-wise regression function three parameters: t1, t2, k. function can expressed mathematically follows: fn_linear_sat() \\[\\begin{equation} f(t; t_1, t_2, k) = \\begin{cases} 0 & \\text{} t < t_1 \\\\ \\dfrac{k}{t_2 - t_1} \\cdot (t - t_1) & \\text{} t_1 \\leq t \\leq t_2 \\\\ k & \\text{} t > t_2 \\end{cases} \\end{equation}\\]","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/canopy-model.html","id":"fitting-models","dir":"Articles","previous_headings":"","what":"3. Fitting Models","title":"Modeling","text":"fit model, use modeler function. : x specifies days planting (DAP), y canopy variable modeled, grp allows us perform group analysis, e.g., multiple plots. example, 196 plots fit model plots 166 40 subset. define piecewise function fn_linear_sat set initial values parameters. fitting, can inspect model summary visualize fit using plot function:","code":"mod_1 <- dt_potato |>   modeler(     x = DAP,     y = Canopy,     grp = Plot,     fn = \"fn_linear_sat\",     parameters = c(t1 = 45, t2 = 80, k = 0.9),     subset = c(166, 40)   ) mod_1 #>  #> Call: #> Canopy ~ fn_linear_sat(DAP, t1, t2, k)  #>  #> Sum of Squares Error: #>     Min.  1st Qu.   Median     Mean  3rd Qu.     Max.  #>  0.05448 10.26923 20.48397 20.48397 30.69871 40.91346  #>  #> Optimization Results `head()`: #>  uid   t1   t2   k     sse #>   40 34.8 60.6 100  0.0545 #>  166 31.6 57.5 100 40.9135 #>  #> Metrics: #>  Groups      Timing Convergence Iterations #>       2 1.7149 secs        100% 558.5 (id) plot(mod_1, id = c(166, 40)) kable(mod_1$param)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/canopy-model.html","id":"extracting-model-coefficients-and-uncertainty-measures","dir":"Articles","previous_headings":"","what":"3.1. Extracting model coefficients and uncertainty measures","title":"Modeling","text":"model fitted, can extract key statistical information, coefficients, standard errors, confidence intervals, variance-covariance matrix group (plot). metrics allow us draw conclusions parameter estimates assess uncertainty around . functions coef, confint, vcov used follows: coef: Extracts estimated coefficients group. confint: Provides confidence intervals parameter estimates. vcov: Returns variance-covariance matrix, can used understand relationships estimates variability.","code":"coef(mod_1) #> # A tibble: 6 × 6 #>     uid coefficient solution std.error `t value` `Pr(>|t|)` #>   <dbl> <chr>          <dbl>     <dbl>     <dbl>      <dbl> #> 1    40 t1              34.8    0.0240    1453.    2.93e-15 #> 2    40 t2              60.6    0.0368    1648.    1.56e-15 #> 3    40 k              100.     0.0603    1659.    1.51e-15 #> 4   166 t1              31.6    0.794       39.8   1.89e- 7 #> 5   166 t2              57.5    0.902       63.8   1.79e- 8 #> 6   166 k              100.     1.65        60.6   2.32e- 8 confint(mod_1) #> # A tibble: 6 × 6 #>     uid coefficient solution std.error ci_lower ci_upper #>   <dbl> <chr>          <dbl>     <dbl>    <dbl>    <dbl> #> 1    40 t1              34.8    0.0240     34.8     34.9 #> 2    40 t2              60.6    0.0368     60.5     60.7 #> 3    40 k              100.     0.0603     99.8    100.  #> 4   166 t1              31.6    0.794      29.6     33.7 #> 5   166 t2              57.5    0.902      55.2     59.9 #> 6   166 k              100.     1.65       95.8    104. vcov(mod_1) #> $`40` #>               t1            t2            k #> t1  5.755016e-04 -0.0002977975 4.429736e-08 #> t2 -2.977975e-04  0.0013525945 9.350853e-04 #> k   4.429736e-08  0.0009350853 3.632249e-03 #>  #> $`166` #>             t1         t2           k #> t1  0.63072149 -0.2613850 -0.00283193 #> t2 -0.26138501  0.8131631  0.71197685 #> k  -0.00283193  0.7119768  2.72567110"},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/canopy-model.html","id":"providing-different-initial-values","dir":"Articles","previous_headings":"","what":"4. Providing different initial values","title":"Modeling","text":"initial fit may always optimal, can adjust initial parameter values plot even fix certain parameters improve model.  ’s important note providing poor initial guesses parameters can lead inaccurate unreliable model fits. example, mistakenly assign t1 (day plant emergence) value greater t2 (day maximum canopy), model fit can fail produce nonsensical results.","code":"initials <- data.frame(   uid = c(166, 40),   t1 = c(70, 60),   t2 = c(40, 80),   k = c(100, 100) ) kable(initials) mod_2 <- dt_potato |>   modeler(     x = DAP,     y = Canopy,     grp = Plot,     fn = \"fn_linear_sat\",     parameters = initials,     subset = c(166, 40)   ) plot(mod_2, id = c(166, 40)) kable(mod_2$param)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/canopy-model.html","id":"fixing-some-parameters-of-the-model","dir":"Articles","previous_headings":"","what":"5. Fixing some parameters of the model","title":"Modeling","text":"certain cases, may want fix specific parameters either known prefer model leave parameters unchanged. example, can fix parameter k, represents maximum canopy value, follows:  fixing k 100, telling model maximum canopy plots fixed 100%. allows model focus estimating parameters, t1 t2, potentially improving accuracy estimates reducing complexity model.","code":"fixed_params <- list(k = \"max(y)\") mod_3 <- dt_potato |>   modeler(     x = DAP,     y = Canopy,     grp = Plot,     fn = \"fn_linear_sat\",     parameters = c(t1 = 45, t2 = 80, k = 0.9),     fixed_params = fixed_params,     subset = c(166, 40)   ) plot(mod_3, id = c(166, 40)) kable(mod_3$param)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/canopy-model.html","id":"comparing-estimations","dir":"Articles","previous_headings":"","what":"6. Comparing estimations","title":"Modeling","text":"fitting multiple models different initial values, fixed parameters, canopy adjustments, can compare resulting coefficients sum square errors (sse) evaluate impact changes.","code":"rbind.data.frame(   mutate(mod_1$param, model = \"1\", .before = uid),   mutate(mod_2$param, model = \"2\", .before = uid),   mutate(mod_3$param, model = \"3\", .before = uid) ) |>   filter(uid %in% 166) |>   kable() rbind.data.frame(   mutate(AIC(mod_1), model = \"1\", .before = uid),   mutate(AIC(mod_2), model = \"2\", .before = uid),   mutate(AIC(mod_3), model = \"3\", .before = uid) ) |>   filter(uid %in% 166) |>   kable()"},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/canopy-model.html","id":"making-predictions","dir":"Articles","previous_headings":"","what":"7. Making predictions","title":"Modeling","text":"model fitted validated best representation data, can proceed make predictions. predict.modeler() function provides range flexible prediction options, allowing users perform point predictions, calculate area curve (AUC), compute first second derivatives, even evaluate custom functions parameters. examples demonstrating capabilities: example, predict.modeler() function tailors predictions user’s needs, whether ’s estimating single value, integrating across range, calculating parameter-based expression.","code":"# Point Prediction predict(mod_1, x = 45, type = \"point\", id = 166) |> kable() # AUC Prediction predict(mod_1, x = c(0, 108), type = \"auc\", id = 166) |> kable() # Function of the parameters predict(mod_1, formula = ~ t2 - t1, id = 166) |> kable()"},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/canopy-model.html","id":"modelling-all-plots-using-parallel-processing","dir":"Articles","previous_headings":"","what":"8. Modelling all plots using parallel processing","title":"Modeling","text":"Finally, can apply method 196 plots, leveraging parallel processing speed computation. , specify parallel = TRUE options argument, set number cores using function parallel::detectCores(), automatically detects available cores.","code":"mod <- dt_potato |>   modeler(     x = DAP,     y = Canopy,     grp = Plot,     fn = \"fn_linear_sat\",     parameters = c(t1 = 45, t2 = 80, k = 0.9),     fixed_params = list(k = \"max(y)\"),     options = list(progress = TRUE, parallel = TRUE, workers = 5)   )"},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/how_to_start.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"How to start","text":"basic idea vignette illustrate users use flexFitR package. ’ll start basic example: simple linear regression. Although example primary focus package, serve demonstrate use.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/how_to_start.html","id":"simple-linear-regression","dir":"Articles","previous_headings":"","what":"1. Simple linear regression","title":"How to start","text":"example, ’ll work small dataset consisting 6 observations, X independent variable Y dependent variable.  First, define objective function. case, function fn_lm represent linear regression, b intercept m slope regression. plot_fn function, integrated package, allows us plot function parameters provided. useful visualizing shape function fitting model data.  fit model, use modeler function. function, pass x independent variable, y dependent variable, vector parameters assign initial values coefficient b coefficient m. model fitted, can examine output, extract estimated parameters, make plots, predict new x values.  order get coefficients variance-covariance matrix make use coef vcov function, takes model object argument. Finally, can make predictions using predict function, takes fitted model object X value want make prediction. can compare lm function R, give results similar obtained package.","code":"library(flexFitR) library(dplyr) library(ggpubr) dt <- data.frame(X = 1:6, Y = c(12, 16, 44, 50, 95, 100)) plot(explorer(dt, X, Y), type = \"xy\") fn_lm <- function(x, b, m) {   y <- b + m * x   return(y) } plot_fn(fn = \"fn_lm\", params = c(b = 10, m = 5)) mod <- dt |>   modeler(     x = X,     y = Y,     fn = \"fn_lm\",     parameters = c(b = -5, m = 10)   ) mod #>  #> Call: #> Y ~ fn_lm(X, b, m)  #>  #> Residuals: #>     Min.  1st Qu.   Median     Mean  3rd Qu.     Max.  #> -12.5905  -6.0762  -0.3476   0.0000   6.1952  12.8952  #>  #> Optimization Results `head()`: #>  uid     b    m sse #>    1 -15.5 19.5 449 #>  #> Metrics: #>  Groups      Timing Convergence Iterations #>       1 0.8599 secs        100%   259 (id) a <- plot(mod, color = \"blue\", title = \"Raw data\") b <- plot(mod, type = 4, n_points = 200, color = \"black\") ggarrange(a, b) coef(mod) #> # A tibble: 2 × 6 #>     uid coefficient solution std.error `t value` `Pr(>|t|)` #>   <dbl> <chr>          <dbl>     <dbl>     <dbl>      <dbl> #> 1     1 b              -15.5      9.86     -1.57    0.192   #> 2     1 m               19.5      2.53      7.71    0.00152 vcov(mod) #> $`1` #>           b          m #> b  97.21937 -22.435238 #> m -22.43524   6.410068 predict(mod, x = 4.5) #> # A tibble: 1 × 4 #>     uid x_new predicted.value std.error #>   <dbl> <dbl>           <dbl>     <dbl> #> 1     1   4.5            72.3      5.01"},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/how_to_start.html","id":"comparison-with-lm","dir":"Articles","previous_headings":"1. Simple linear regression","what":"Comparison with lm","title":"How to start","text":"previous example fairly simple, can consider complex scenario need fit just one function, hundreds functions several groups. can achieved using grp argument modeler function. Additionally, can parallelize processes setting parallel argument TRUE defining number cores use. ’s important note depending functions defined user, parameters may need constrained, required greater less zero. cases, certain parameters might need fixed known values. complex situations, many curves fit working complex functions—whether non linear regressions specific parameter constraints cases parameters fixed group—modeler offers extensive flexibility.","code":"mo <- lm(Y ~ X, data = dt) summary(mo)$coefficients #>              Estimate Std. Error   t value    Pr(>|t|) #> (Intercept) -15.46667   9.859988 -1.568629 0.191812151 #> X            19.51429   2.531811  7.707639 0.001524882 vcov(mo) #>             (Intercept)          X #> (Intercept)    97.21937 -22.435238 #> X             -22.43524   6.410068 predict(mo, newdata = data.frame(X = 4.5), se.fit = TRUE) #> $fit #>        1  #> 72.34762  #>  #> $se.fit #> [1] 5.010599 #>  #> $df #> [1] 4 #>  #> $residual.scale #> [1] 10.59133"},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/how_to_start.html","id":"piece-wise-regression","dir":"Articles","previous_headings":"","what":"2. Piece-wise regression","title":"How to start","text":"following example, although still simple, represents slightly complex function greater number parameters. case, piece-wise regression, parameterized t1, t2, k, defined following expression: fitting model, let’s take look example dataset.  can make plot piecewise function fit model using modeler function.  fitting model, can examine results, plot fitted curve, extract coefficients associated p-values, obtain variance-covariance matrix, make predictions unknown values x.  Finally, illustrate provide different initial values function dealing multiple groups, also show fix parameters objective function.","code":"fun <- function(t, t1 = 45, t2 = 80, k = 0.9) {   if (t < t1) {     y <- 0   } else if (t >= t1 && t <= t2) {     y <- k / (t2 - t1) * (t - t1)   } else {     y <- k   }   return(y) } dt <- data.frame(   time = c(0, 29, 36, 42, 56, 76, 92, 100, 108),   variable = c(0, 0, 0.67, 15.11, 77.38, 99.81, 99.81, 99.81, 99.81) ) plot(explorer(dt, time, variable), type = \"xy\") plot_fn(fn = \"fun\", params = c(t1 = 25, t2 = 70, k = 90)) mod_1 <- dt |>   modeler(     x = time,     y = variable,     fn = \"fun\",     parameters = c(t1 = 45, t2 = 80, k = 90)   ) mod_1 #>  #> Call: #> variable ~ fun(time, t1, t2, k)  #>  #> Residuals: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #> 0.00000 0.00000 0.00000 0.07444 0.00000 0.67000  #>  #> Optimization Results `head()`: #>  uid   t1 t2    k   sse #>    1 38.6 61 99.8 0.449 #>  #> Metrics: #>  Groups      Timing Convergence Iterations #>       1 0.6595 secs        100%   511 (id) plot(mod_1) # Coefficients coef(mod_1) #> # A tibble: 3 × 6 #>     uid coefficient solution std.error `t value` `Pr(>|t|)` #>   <dbl> <chr>          <dbl>     <dbl>     <dbl>      <dbl> #> 1     1 t1              38.6    0.0779      496.   4.54e-15 #> 2     1 t2              61.0    0.0918      665.   7.82e-16 #> 3     1 k               99.8    0.137       730.   4.47e-16 # Variance-Covariance Matrix vcov(mod_1) #> $`1` #>               t1           t2            k #> t1  6.061705e-03 -0.002940001 1.877072e-07 #> t2 -2.940001e-03  0.008431400 4.204939e-03 #> k   1.877072e-07  0.004204939 1.870426e-02 # Making predictions predict(mod_1, x = 45) #> # A tibble: 1 × 4 #>     uid x_new predicted.value std.error #>   <dbl> <dbl>           <dbl>     <dbl> #> 1     1    45            28.5     0.223"},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/how_to_start.html","id":"providing-initial-values","dir":"Articles","previous_headings":"2. Piece-wise regression","what":"Providing Initial values","title":"How to start","text":"example, don’t grouping variable. However, default, function assigns unique identifier (uid) dataset. , need specify uid = 1 initial values fixed parameters. one group, need modify parameters argument accordingly. approach primarily illustrative purposes.","code":"init <- data.frame(uid = 1, t1 = 20, t2 = 30, k = 0.8)  mod_2 <- dt |>   modeler(     x = time,     y = variable,     fn = \"fun\",     parameters = init   ) mod_2 #>  #> Call: #> variable ~ fun(time, t1, t2, k)  #>  #> Residuals: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #> 0.00000 0.00000 0.00000 0.07444 0.00000 0.67000  #>  #> Optimization Results `head()`: #>  uid   t1 t2    k   sse #>    1 38.6 61 99.8 0.449 #>  #> Metrics: #>  Groups      Timing Convergence Iterations #>       1 0.6809 secs        100%   567 (id) coef(mod_2) #> # A tibble: 3 × 6 #>     uid coefficient solution std.error `t value` `Pr(>|t|)` #>   <dbl> <chr>          <dbl>     <dbl>     <dbl>      <dbl> #> 1     1 t1              38.6    0.0779      496.   4.54e-15 #> 2     1 t2              61.0    0.0918      665.   7.82e-16 #> 3     1 k               99.8    0.137       730.   4.47e-16"},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/how_to_start.html","id":"fixing-parameters","dir":"Articles","previous_headings":"2. Piece-wise regression","what":"Fixing parameters","title":"How to start","text":"vignette provided basic introduction using flexFitR package, starting simple examples linear regression piecewise regression. goal demonstrate fundamental features flexibility package. However, complex situations can arise working high-throughput phenotypic (HTP) data, involve multiple groups, parameter constraints, advanced modeling scenarios. complex situations illustrated vignettes, use real HTP data showcase full capabilities flexFitR package.","code":"fix <- data.frame(uid = 1, k = 98)  mod_3 <- dt |>   modeler(     x = time,     y = variable,     fn = \"fun\",     parameters = c(t1 = 45, t2 = 80, k = 90),     fixed_params = fix   ) mod_3 #>  #> Call: #> variable ~ fun(time, t1, t2, k)  #>  #> Residuals: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  0.0000  0.0000  0.6700  0.8789  1.8100  1.8100  #>  #> Optimization Results `head()`: #>  uid   t1   t2  sse  k #>    1 38.6 60.6 13.6 98 #>  #> Metrics: #>  Groups      Timing Convergence Iterations #>       1 0.5644 secs        100%   321 (id) coef(mod_3) #> # A tibble: 2 × 6 #>     uid coefficient solution std.error `t value` `Pr(>|t|)` #>   <dbl> <chr>          <dbl>     <dbl>     <dbl>      <dbl> #> 1     1 t1              38.6     0.396      97.5   3.15e-12 #> 2     1 t2              60.6     0.429     141.    2.34e-13 plot(mod_3) rbind(metrics(mod_1), metrics(mod_2), metrics(mod_3)) #> # A tibble: 3 × 8 #>     uid var         SSE    MAE    MSE  RMSE r_squared     n #>   <dbl> <chr>     <dbl>  <dbl>  <dbl> <dbl>     <dbl> <int> #> 1     1 variable  0.449 0.0744 0.0499 0.223     1.00      9 #> 2     1 variable  0.449 0.0744 0.0499 0.223     1.00      9 #> 3     1 variable 13.6   0.879  1.51   1.23      0.999     9"},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/maturity-model.html","id":"introduction-to-modeling-with-constraints","dir":"Articles","previous_headings":"","what":"Introduction to Modeling with Constraints","title":"Modeling with constraints","text":"many biological models, certain relationships parameters expected. example: parameters exceed certain values (e.g., maximum growth rates). parameters maintain specific relationships (e.g., one stage occurring another time). vignette demonstrates apply types constraints {flexFitR} guide optimization process.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/maturity-model.html","id":"example-case","dir":"Articles","previous_headings":"Introduction to Modeling with Constraints","what":"Example Case","title":"Modeling with constraints","text":"example, use Green Leaf Index (GLI) derived UAV imagery model plant emergence, canopy closure, senescence. parameters interested include: t1: Emergence time t2: Canopy closure time t3: Senescence onset expectation \\(0 < t1 < t2 < t3\\). apply constraints ensure relationship hold.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/maturity-model.html","id":"loading-libraries","dir":"Articles","previous_headings":"","what":"Loading libraries","title":"Modeling with constraints","text":"","code":"library(flexFitR) library(dplyr) library(kableExtra) library(ggpubr) library(purrr)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/maturity-model.html","id":"exploring-data","dir":"Articles","previous_headings":"","what":"1. Exploring data","title":"Modeling with constraints","text":"begin explorer function, provides basic statistical summaries visualizations help understand temporal evolution plot.","code":"data(dt_potato) explorer <- explorer(dt_potato, x = DAP, y = c(GLI), id = Plot) p1 <- plot(explorer, type = \"evolution\", return_gg = TRUE, add_avg = TRUE) p2 <- plot(explorer, type = \"x_by_var\", return_gg = TRUE) ggarrange(p1, p2, nrow = 1) kable(mutate_if(explorer$summ_vars, is.numeric, round, 2))"},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/maturity-model.html","id":"regression-function","dir":"Articles","previous_headings":"","what":"2. Regression function","title":"Modeling with constraints","text":"exploring data, define regression function. use linear-plateau-linear function five parameters: t1, t2, t3, k, \\(\\beta\\). function can expressed mathematically follows: fn_lin_pl_lin() \\[\\begin{equation} f(t; t_1, t_2, t_3, k, \\beta) = \\begin{cases} 0 & \\text{} t < t_1 \\\\ \\dfrac{k}{t_2 - t_1} \\cdot (t - t_1) & \\text{} t_1 \\leq t \\leq t_2 \\\\ k & \\text{} t_2 \\leq t \\leq t_3 \\\\ k + \\beta \\cdot (t - t_3) & \\text{} t > t_3 \\end{cases} \\end{equation}\\]  impose constraints, can reformulate function. instance, want ensure \\(t3 \\geq t2\\), introduce dt difference t3 t2: \\[\\begin{equation} f(t; t_1, t_2, dt, k, \\beta) = \\begin{cases} 0 & \\text{} t < t_1 \\\\ \\dfrac{k}{t_2 - t_1} \\cdot (t - t_1) & \\text{} t_1 \\leq t \\leq t_2 \\\\ k & \\text{} t_2 \\leq t \\leq (t_2 + dt) \\\\ k + \\beta \\cdot (t - (t_2 + dt)) & \\text{} t > (t_2 + dt) \\end{cases} \\end{equation}\\] enforce \\(dt > 0\\) \\(\\beta < 0\\) (.e., non-positive slope end curve), specify bounds modeler function follows:","code":"plot_fn(   fn = \"fn_lin_pl_lin\",   params = c(t1 = 38.7, t2 = 62, t3 = 90, k = 0.32, beta = -0.01),   interval = c(0, 108),   color = \"black\",   base_size = 15 ) # Define constraints and bounds for the model lower_bounds <- c(t1 = 0, t2 = 0, dt = 0, k = 0, beta = -Inf) upper_bounds <- c(t1 = Inf, t2 = Inf, dt = Inf, k = Inf, beta = 0) # Initial values initial_vals <- c(t1 = 38, t2 = 62, dt = 28, k = 0.32, beta = -0.01)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/maturity-model.html","id":"fitting-models-with-constraints","dir":"Articles","previous_headings":"","what":"3. Fitting Models with Constraints","title":"Modeling with constraints","text":"fit model constraints passing lower upper arguments modeler. vignette, fit model plots 195 40 subset total 196 plots. : x specifies days planting (DAP), y GLI variable modeled grp enables group analysis across multiple plots parameters initial parameter values method specifies optimization methods evaluate fitting, can inspect model summary visualize fit using plot function:","code":"mod_1 <- dt_potato |>   modeler(     x = DAP,     y = GLI,     grp = Plot,     fn = \"fn_lin_pl_lin2\",     parameters = initial_vals,     lower = lower_bounds,     upper = upper_bounds,     method = c(\"nlminb\", \"L-BFGS-B\"),     subset = c(195, 40)   ) print(mod_1) #>  #> Call: #> GLI ~ fn_lin_pl_lin2(DAP, t1, t2, dt, k, beta)  #>  #> Sum of Squares Error: #>      Min.   1st Qu.    Median      Mean   3rd Qu.      Max.  #> 1.961e-05 4.939e-05 7.918e-05 7.918e-05 1.090e-04 1.388e-04  #>  #> Optimization Results `head()`: #>  uid   t1   t2   dt     k     beta      sse #>   40 37.3 64.4 19.5 0.369 -0.01454 1.96e-05 #>  195 40.1 63.1 28.3 0.325 -0.00809 1.39e-04 #>  #> Metrics: #>  Groups      Timing Convergence Iterations #>       2 1.1346 secs        100%   311 (id) plot(mod_1, id = c(195, 40)) kable(mod_1$param)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/maturity-model.html","id":"extracting-model-coefficients-and-uncertainty-measures","dir":"Articles","previous_headings":"","what":"3.1. Extracting model coefficients and uncertainty measures","title":"Modeling with constraints","text":"model fitted, can extract key statistical information, coefficients, standard errors, confidence intervals, variance-covariance matrix plot. metrics help evaluate parameter reliability assess uncertainty. functions coef, confint, vcov used follows: coef: Extracts estimated coefficients group. confint: Provides confidence intervals parameter estimates. vcov: Returns variance-covariance matrix, can used understand relationships estimates variability.","code":"coef(mod_1, id = 40) #> # A tibble: 5 × 6 #>     uid coefficient solution std.error `t value`  `Pr(>|t|)` #>   <dbl> <chr>          <dbl>     <dbl>     <dbl>       <dbl> #> 1    40 t1           37.3     0.258        145.  0.000000727 #> 2    40 t2           64.4     0.371        174.  0.000000422 #> 3    40 dt           19.5     0.626         31.2 0.0000725   #> 4    40 k             0.369   0.00256      144.  0.000000733 #> 5    40 beta         -0.0145  0.000452     -32.2 0.0000660 confint(mod_1, id = 40) #> # A tibble: 5 × 6 #>     uid coefficient solution std.error ci_lower ci_upper #>   <dbl> <chr>          <dbl>     <dbl>    <dbl>    <dbl> #> 1    40 t1           37.3     0.258     36.5     38.1    #> 2    40 t2           64.4     0.371     63.2     65.6    #> 3    40 dt           19.5     0.626     17.5     21.5    #> 4    40 k             0.369   0.00256    0.361    0.377  #> 5    40 beta         -0.0145  0.000452  -0.0160  -0.0131 vcov(mod_1, id = 40) #> $`40` #>                 t1            t2            dt             k          beta #> t1    6.640964e-02 -4.684756e-02  0.0468605417 -7.841952e-08 -8.219226e-09 #> t2   -4.684756e-02  1.377112e-01 -0.1707231494  4.797169e-04  2.416003e-08 #> dt    4.686054e-02 -1.707231e-01  0.3915152910 -9.292910e-04 -1.699689e-04 #> k    -7.841952e-08  4.797169e-04 -0.0009292910  6.536323e-06  8.415252e-11 #> beta -8.219226e-09  2.416003e-08 -0.0001699689  8.415252e-11  2.042313e-07"},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/maturity-model.html","id":"plotting-options","dir":"Articles","previous_headings":"","what":"4. Plotting options","title":"Modeling with constraints","text":"Using type = 2 plot function generates coefficients plot. allows us view estimated coefficients associated confidence intervals group.  Another option (type = 4) shows fitted curve (black line), confidence interval (blue-dashed line), prediction interval (red-dashed line). Additionally, setting type = 5 displays first derivative, indicating rate change time.","code":"plot(mod_1, type = 2, id = c(195, 40), label_size = 8) a <- plot(mod_1, type = 4, color = \"black\", title = \"Fitted Curve + CIs & PIs\") b <- plot(mod_1, type = 5, color = \"black\") ggarrange(a, b)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/maturity-model.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"5. Conclusion","title":"Modeling with constraints","text":"vignette showed apply constraints {flexFitR} models better capture biological realities improve parameter estimation. Constraints can essential tool ensuring models produce interpretable meaningful results.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/plotting.html","id":"loading-dataset-and-libraries","dir":"Articles","previous_headings":"","what":"Loading dataset and libraries","title":"Plotting options","text":"","code":"library(flexFitR) library(dplyr) library(kableExtra) library(ggpubr) library(purrr) data(dt_potato) head(dt_potato) |> kable()"},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/plotting.html","id":"modeling","dir":"Articles","previous_headings":"","what":"Modeling","title":"Plotting options","text":"","code":"plots <- 2:7 mod <- dt_potato |>   modeler(     x = DAP,     y = Canopy,     grp = Plot,     fn = \"fn_logistic\",     parameters = c(L = 100, k = 4, t0 = 40),     subset = plots   )"},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/plotting.html","id":"plotting-predictions-and-derivatives","dir":"Articles","previous_headings":"","what":"Plotting predictions and derivatives","title":"Plotting options","text":"","code":"# Raw data with fitted curves plot(mod, type = 1, color = \"blue\", id = plots, title = \"Fitted curves\") # Model coefficients plot(mod, type = 2, color = \"blue\", id = plots, label_size = 10) # Fitted curves only c <- plot(mod, type = 3, color = \"blue\", id = plots, title = \"Fitted curves\") # Fitted curves with confidence intervals d <- plot(   x = mod,   type = 4,   n_points = 200,   color = \"black\",   title = \"Fitted curve (uid = 2)\" ) # First derivative with confidence intervals e <- plot(   x = mod,   type = 5,   n_points = 200,   color = \"black\",   title = \"1st Derivative (uid = 2)\" ) # Second derivative with confidence intervals f <- plot(   x = mod,   type = 6,   n_points = 200,   color = \"black\",   title = \"2nd Derivative (uid = 2)\" ) ggarrange(c, d, e, f)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/predicted_values.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"0. Model fitting","title":"Predicted values","text":"illustrate functionality predict(), use potato dataset fit logistic models form: \\[f(t) = \\frac{L}{1 + e^{-k(t - t_0)}}\\] simplicity, ’ll focus just two plots dataset (plot 40 plot 166) total 196 plots available. fitting model, ’ll take closer look parameter estimates, visualize fitted curves, start making predictions.","code":"fn <- function(t, L, k, t0) L / (1 + exp(-k * (t - t0))) plots <- c(40, 166) mod_1 <- dt_potato |>   modeler(     x = DAP,     y = Canopy,     grp = Plot,     fn = \"fn\",     parameters = c(L = 100, k = 4, t0 = 40),     subset = plots   ) print(mod_1) #>  #> Call: #> Canopy ~ fn(DAP, L, k, t0)  #>  #> Sum of Squares Error: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   23.19   26.73   30.28   30.28   33.83   37.38  #>  #> Optimization Results `head()`: #>  uid    L     k   t0  sse #>   40 99.8 0.199 47.7 37.4 #>  166 99.0 0.262 42.8 23.2 #>  #> Metrics: #>  Groups      Timing Convergence Iterations #>       2 1.6285 secs        100%   729 (id) plot(mod_1, id = plots)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/predicted_values.html","id":"point-prediction","dir":"Articles","previous_headings":"","what":"1. Point prediction","title":"Predicted values","text":"make point predictions, use predict() function specify \\(x\\) value(s) want compute \\(\\hat{f}(x)\\). default, prediction type set \"point\", unnecessary explicitly include type = \"point\". great way visualize plotting fitted curve overlaying predicted points.  ’ll also notice predictions come standard errors, can adjusted using se_interval argument choose \"confidence\" \"prediction\" intervals, depending type intervals want generate (sometimes referred narrow vs. wide intervals).","code":"points <- predict(mod_1, x = 55, type = \"point\", se_interval = \"confidence\") points |> kable() mod_1 |>   plot(id = plots, type = 3) +   color_palette(palette = \"jco\") +   geom_point(data = points, aes(x = x_new, y = predicted.value), shape = 8) points <- predict(mod_1, x = 55, type = \"point\", se_interval = \"prediction\") points |> kable()"},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/predicted_values.html","id":"integral-of-the-function-area-under-the-curve","dir":"Articles","previous_headings":"","what":"2. Integral of the function (area under the curve)","title":"Predicted values","text":"area fitted curve another common calculation, especially trying summarize overall behavior function specific range. compute AUC, set type = \"auc\" provide interval interest x argument. can also specify number subintervals trapezoidal rule approximation using n_points (e.g., n_points = 500 provides high-resolution approximation ). \\[ \\text{Area} = \\int_{0}^{T} \\frac{L}{1 + e^{-k(t - t_0)}} \\, dt \\]","code":"predict(mod_1, x = c(0, 108), type = \"auc\", n_points = 500) |> kable()"},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/predicted_values.html","id":"function-of-the-parameters","dir":"Articles","previous_headings":"","what":"3. Function of the parameters","title":"Predicted values","text":"many cases, interest lies parameters functions parameters. using formula argument, can compute user-defined functions estimated parameters along standard errors. additional arguments required functionality.","code":"predict(mod_1, formula = ~ k / L * 100) |> kable() predict(mod_1, formula = ~ (k * L) / 4) |> kable()"},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/predicted_values.html","id":"derivatives","dir":"Articles","previous_headings":"","what":"4. Derivatives","title":"Predicted values","text":"interested derivatives fitted function, predict.modeler() provides tools compute first (\\(f'(x)\\)) second order (\\(f''(x)\\)) derivatives specified points intervals. derivatives logistic functions straightforward compute analytically, true many functions. address , predict() employs numerical approximation using “Richardson” method. logistic function, first derivative following form: \\[ f'(t) = \\frac{k L e^{-k(t - t_0)}}{\\left(1 + e^{-k(t - t_0)}\\right)^2} \\] second derivative following: \\[f''(t) = \\frac{k^2 L e^{-k(t - t_0)} \\left(1 - e^{-k(t - t_0)}\\right)}{\\left(1 + e^{-k(t - t_0)}\\right)^3}\\] first derivative tells us growth rate, second derivative reveals growth rate accelerating decelerating.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/predicted_values.html","id":"first-derivative","dir":"Articles","previous_headings":"4. Derivatives","what":"4.1. First derivative","title":"Predicted values","text":"compute first derivative, set type = \"fd\" predict() function provide points intervals x argument. case just want visualize first derivative can use plot() function.  \\(x\\)-coordinate maximum occurs can found programmatically, corresponding value \\(\\hat{f}(x)\\) can computed using point predictions follows:","code":"plot(mod_1, id = plots, type = 5, color = \"blue\", add_ci = FALSE) interval <- seq(0, 100, by = 0.1) points_fd <- mod_1 |>   predict(x = interval, type = \"fd\") |>   group_by(uid) |>   summarise(     max_fd = max(predicted.value),     argmax_fd = x_new[which.max(predicted.value)]   ) points_fd |> kable() mod_1 |>   plot(id = plots, type = 3) +   color_palette(palette = \"jco\") +   geom_vline(data = points_fd, aes(xintercept = argmax_fd), linetype = 2) +   geom_label(data = points_fd, aes(x = argmax_fd, y = 0, label = argmax_fd)) +   facet_wrap(~uid) +   theme(legend.position = \"none\") points_fd$y_hat <- sapply(   X = plots,   FUN = \\(i) {     mod_1 |>       predict(x = points_fd[points_fd$uid == i, \"argmax_fd\"], id = i) |>       pull(predicted.value)   } ) points_fd |> kable() mod_1 |>   plot(id = plots, type = 3) +   color_palette(palette = \"jco\") +   geom_point(data = points_fd, aes(x = argmax_fd, y = y_hat), shape = 8)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/predicted_values.html","id":"second-derivative","dir":"Articles","previous_headings":"4. Derivatives","what":"4.2. Second derivative","title":"Predicted values","text":"Similarly, second derivative can calculated setting type = \"sd\". derivative shows growth rate changing, helping determine growth starts slow speed .  can also identify second derivative reaches maximum minimum values, plot changes deeper understanding growth dynamics.","code":"plot(mod_1, id = plots, type = 6, color = \"blue\", add_ci = FALSE) points_sd <- mod_1 |>   predict(x = interval, type = \"sd\") |>   group_by(uid) |>   summarise(     max_sd = max(predicted.value),     argmax_sd = x_new[which.max(predicted.value)],     min_sd = min(predicted.value),     argmin_sd = x_new[which.min(predicted.value)]   ) points_sd |> kable() mod_1 |>   plot(id = plots, type = 3) +   color_palette(palette = \"jco\") +   geom_vline(data = points_sd, aes(xintercept = argmax_sd), linetype = 2) +   geom_vline(data = points_sd, aes(xintercept = argmin_sd), linetype = 2) +   facet_wrap(~uid) +   theme(legend.position = \"none\")"},{"path":"https://apariciojohan.github.io/flexFitR/dev/articles/predicted_values.html","id":"conclusions","dir":"Articles","previous_headings":"","what":"5. Conclusions","title":"Predicted values","text":"predict.modeler() function, part modeling toolkit, offers range useful predictions can tailored various needs—whether ’s making point estimates, exploring area curve, analyzing derivatives. examples presented showcase flexibility power function, just beginning. Every dataset research question brings unique challenges, hope vignette demonstrates predict.modeler() can help address .","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Johan Aparicio. Maintainer, author. Jeffrey Endelman. Author. University Wisconsin Madison. Copyright holder.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Aparicio J, Endelman J (2025). flexFitR: Flexible Non-Linear Least Square Model Fitting. R package version 1.0.0.9000, https://github.com/AparicioJohan/flexFitR, https://apariciojohan.github.io/flexFitR/.","code":"@Manual{,   title = {flexFitR: Flexible Non-Linear Least Square Model Fitting},   author = {Johan Aparicio and Jeffrey Endelman},   year = {2025},   note = {R package version 1.0.0.9000,      https://github.com/AparicioJohan/flexFitR},   url = {https://apariciojohan.github.io/flexFitR/}, }"},{"path":[]},{"path":"https://apariciojohan.github.io/flexFitR/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement johanstevenapa@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/index.html","id":"flexfitr-","dir":"","previous_headings":"","what":"Flexible Non-Linear Least Square Model Fitting","title":"Flexible Non-Linear Least Square Model Fitting","text":"flexFitR R package designed efficient modeling analysis large complex datasets. offers powerful tools parameter estimation, model fitting, visualization, leveraging {optimx} package optimization future package parallel processing.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Flexible Non-Linear Least Square Model Fitting","text":"Install released version CRAN: can also install development version flexFitR GitHub :","code":"install.packages(\"flexFitR\") # install.packages(\"devtools\") devtools::install_github(\"AparicioJohan/flexFitR\")"},{"path":"https://apariciojohan.github.io/flexFitR/dev/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Flexible Non-Linear Least Square Model Fitting","text":"Parameter Estimation: Utilizes {optimx} derivative-free algorithms solve estimate parameters given function. Parallelization: Implements parallel processing using future package, enabling efficient fitting hundreds curves simultaneously. Visualization Tools: Provides variety plots visualize model fits, correlations, predictions, . Statistical Rigor: Offers standard errors p-values coefficients, well predictions, supporting robust conclusions interpretations. Prediction: Supports diverse prediction types, including point predictions, area curve (AUC), first second derivatives, user-defined parameter functions, advanced transformations custom expressions based model parameters. Flexibility: Allows users fix certain parameters model specify different initial values per grouping factor. Custom Modeling Functions: Equipped built-modeling functions common analysis tasks, also permitting users supply custom functions.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Flexible Non-Linear Least Square Model Fitting","text":"’s simple example get started flexFitR. example demonstrates fitting piecewise regression model:","code":"library(flexFitR)  dt <- data.frame(   time = c(0, 29, 36, 42, 56, 76, 92, 100, 108),   variable = c(0, 0, 0.67, 15.11, 77.38, 99.81, 99.81, 99.81, 99.81) ) plot(explorer(dt, time, variable), type = \"xy\") fn_linear_sat <- function(t, t1 = 45, t2 = 80, k = 0.9) {   if (t < t1) {     y <- 0   } else if (t >= t1 && t <= t2) {     y <- k / (t2 - t1) * (t - t1)   } else {     y <- k   }   return(y) } # Fitting piecewise regression mod_1 <- dt |>   modeler(     x = time,     y = variable,     fn = \"fn_linear_sat\",     parameters = c(t1 = 45, t2 = 80, k = 90)   ) print(mod_1)  Call: variable ~ fn_linear_sat(time, t1, t2, k)   Residuals:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  0.00000 0.00000 0.00000 0.07444 0.00000 0.67000   Optimization Results `head()`:  uid   t1 t2    k   sse    1 38.6 61 99.8 0.449  Metrics:  Groups      Timing Convergence Iterations       1 0.6798 secs        100%   511 (id) # Auto plot plot(mod_1) # Coefficients coef(mod_1) # A tibble: 3 × 6     uid coefficient solution std.error `t value` `Pr(>|t|)`   <dbl> <chr>          <dbl>     <dbl>     <dbl>      <dbl> 1     1 t1              38.6    0.0779      496.   4.54e-15 2     1 t2              61.0    0.0918      665.   7.82e-16 3     1 k               99.8    0.137       730.   4.47e-16 # Variance-Covariance Matrix vcov(mod_1) $`1`               t1           t2            k t1  6.061705e-03 -0.002940001 1.877072e-07 t2 -2.940001e-03  0.008431400 4.204939e-03 k   1.877072e-07  0.004204939 1.870426e-02 # Making predictions predict(mod_1, x = 45) # A tibble: 1 × 4     uid x_new predicted.value std.error   <dbl> <dbl>           <dbl>     <dbl> 1     1    45            28.5     0.223"},{"path":"https://apariciojohan.github.io/flexFitR/dev/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Flexible Non-Linear Least Square Model Fitting","text":"detailed documentation examples, visit flexFitR Vignette 1: start Vignette 2: Modeling plant emergence canopy growth using UAV data Vignette 3: Modeling constraints Vignette 4: Making predictions Vignette 5: Plotting options","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Flexible Non-Linear Least Square Model Fitting","text":"Contributions flexFitR welcome! ’d like contribute, please fork repository submit pull request. significant changes, please open issue first discuss ideas.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Flexible Non-Linear Least Square Model Fitting","text":"Please note flexFitR project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Flexible Non-Linear Least Square Model Fitting","text":"flexFitR licensed MIT License. See LICENSE file details.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 flexFitR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/anova.modeler.html","id":null,"dir":"Reference","previous_headings":"","what":"Extra Sum-of-Squares F-Test for modeler objects — anova.modeler","title":"Extra Sum-of-Squares F-Test for modeler objects — anova.modeler","text":"Perform extra sum--squares F-test compare two nested models class modeler. test assesses whether additional parameters full model significantly improve fit compared reduced model.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/anova.modeler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extra Sum-of-Squares F-Test for modeler objects — anova.modeler","text":"","code":"# S3 method for class 'modeler' anova(object, full_model = NULL, ...)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/anova.modeler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extra Sum-of-Squares F-Test for modeler objects — anova.modeler","text":"object object class modeler representing reduced model fewer parameters. full_model optional object class modeler representing full model parameters. ... Additional parameters future functionality.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/anova.modeler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extra Sum-of-Squares F-Test for modeler objects — anova.modeler","text":"tibble containing columns F-statistic corresponding p-values, indicating whether full model provides significantly better fit reduced model.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/anova.modeler.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extra Sum-of-Squares F-Test for modeler objects — anova.modeler","text":"Johan Aparicio [aut]","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/anova.modeler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extra Sum-of-Squares F-Test for modeler objects — anova.modeler","text":"","code":"library(flexFitR) dt <- data.frame(X = 1:6, Y = c(12, 16, 44, 50, 95, 100)) mo_1 <- modeler(dt, X, Y, fn = \"fn_lin\", param = c(m = 10, b = -5)) #> Warning: package 'doFuture' was built under R version 4.4.2 #> Loading required package: foreach #> Warning: package 'foreach' was built under R version 4.4.2 #> Loading required package: future #> Warning: package 'future' was built under R version 4.4.2 plot(mo_1)  mo_2 <- modeler(dt, X, Y, fn = \"fn_quad\", param = c(a = 1, b = 10, c = 5)) plot(mo_2)  anova(mo_1, mo_2) #> # A tibble: 1 × 9 #>     uid RSS_reduced RSS_full     n   df1   df2     F `Pr(>F)` .     #>   <dbl>       <dbl>    <dbl> <int> <int> <int> <dbl>    <dbl> <fct> #> 1     1        449.     385.     6     1     3 0.494    0.533 ns"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/coef.modeler.html","id":null,"dir":"Reference","previous_headings":"","what":"Coefficients for an object of class modeler — coef.modeler","title":"Coefficients for an object of class modeler — coef.modeler","text":"Extract estimated coefficients object class modeler.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/coef.modeler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coefficients for an object of class modeler — coef.modeler","text":"","code":"# S3 method for class 'modeler' coef(object, id = NULL, metadata = FALSE, df = FALSE, ...)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/coef.modeler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coefficients for an object of class modeler — coef.modeler","text":"object object class modeler, typically result calling modeler() function. id optional unique identifier filter specific group. Default NULL. metadata Logical. TRUE, metadata included along coefficients. Default FALSE. df Logical. TRUE, degrees freedom fitted model returned alongside coefficients. Default FALSE. ... Additional parameters future functionality.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/coef.modeler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coefficients for an object of class modeler — coef.modeler","text":"data.frame containing model's estimated coefficients, standard errors, optional metadata degrees freedom specified.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/coef.modeler.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Coefficients for an object of class modeler — coef.modeler","text":"Johan Aparicio [aut]","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/coef.modeler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coefficients for an object of class modeler — coef.modeler","text":"","code":"library(flexFitR) data(dt_potato) mod_1 <- dt_potato |>   modeler(     x = DAP,     y = Canopy,     grp = Plot,     fn = \"fn_linear_sat\",     parameters = c(t1 = 45, t2 = 80, k = 0.9),     subset = c(15, 2, 45)   ) print(mod_1) #>  #> Call: #> Canopy ~ fn_linear_sat(DAP, t1, t2, k)  #>  #> Sum of Squares Error: #>     Min.  1st Qu.   Median     Mean  3rd Qu.     Max.  #> 0.002601 0.459153 0.915706 2.206356 3.308233 5.700760  #>  #> Optimization Results `head()`: #>  uid   t1   t2     k    sse #>    2 35.1 61.1 100.0 5.7008 #>   15 38.4 70.1  99.7 0.9157 #>   45 38.3 64.7 100.0 0.0026 #>  #> Metrics: #>  Groups      Timing Convergence Iterations #>       3 4.0385 secs        100%   349 (id) #>  coef(mod_1, id = 2) #> # A tibble: 3 × 6 #>     uid coefficient solution std.error `t value` `Pr(>|t|)` #>   <dbl> <chr>          <dbl>     <dbl>     <dbl>      <dbl> #> 1     2 t1              35.1     0.244      144.   3.04e-10 #> 2     2 t2              61.1     0.387      158.   1.93e-10 #> 3     2 k              100.      0.616      162.   1.69e-10"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/confint.modeler.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence Intervals for a modeler Object — confint.modeler","title":"Confidence Intervals for a modeler Object — confint.modeler","text":"Extract confidence intervals estimated parameters object class modeler.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/confint.modeler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence Intervals for a modeler Object — confint.modeler","text":"","code":"# S3 method for class 'modeler' confint(object, parm = NULL, level = 0.95, id = NULL, ...)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/confint.modeler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence Intervals for a modeler Object — confint.modeler","text":"object object class modeler, typically result calling modeler() function. parm character vector specifying parameters confidence intervals calculated. NULL, confidence intervals parameters returned. Default NULL. level numeric value indicating confidence level intervals. Default 0.95, corresponding 95% confidence interval. id optional unique identifier filter specific group. Default NULL. ... Additional parameters future functionality.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/confint.modeler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence Intervals for a modeler Object — confint.modeler","text":"tibble containing lower upper confidence limits specified parameter.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/confint.modeler.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Confidence Intervals for a modeler Object — confint.modeler","text":"Johan Aparicio [aut]","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/confint.modeler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence Intervals for a modeler Object — confint.modeler","text":"","code":"library(flexFitR) data(dt_potato) mod_1 <- dt_potato |>   modeler(     x = DAP,     y = Canopy,     grp = Plot,     fn = \"fn_linear_sat\",     parameters = c(t1 = 45, t2 = 80, k = 0.9),     subset = c(15, 35, 45)   ) print(mod_1) #>  #> Call: #> Canopy ~ fn_linear_sat(DAP, t1, t2, k)  #>  #> Sum of Squares Error: #>     Min.  1st Qu.   Median     Mean  3rd Qu.     Max.  #> 0.002601 0.459153 0.915706 0.938466 1.406399 1.897092  #>  #> Optimization Results `head()`: #>  uid   t1   t2     k    sse #>   15 38.4 70.1  99.7 0.9157 #>   35 47.2 68.7 100.0 1.8971 #>   45 38.3 64.7 100.0 0.0026 #>  #> Metrics: #>  Groups      Timing Convergence Iterations #>       3 3.1287 secs        100%   355 (id) #>  confint(mod_1) #> # A tibble: 9 × 6 #>     uid coefficient solution std.error ci_lower ci_upper #>   <dbl> <chr>          <dbl>     <dbl>    <dbl>    <dbl> #> 1    15 t1              38.4   0.176       37.9     38.8 #> 2    15 t2              70.1   0.316       69.3     70.9 #> 3    15 k               99.7   0.247       99.0    100.  #> 4    35 t1              47.2 NaN          NaN      NaN   #> 5    35 t2              68.7 NaN          NaN      NaN   #> 6    35 k              100.    0.356       99.1    101.  #> 7    45 t1              38.3   0.00780     38.2     38.3 #> 8    45 t2              64.7   0.0110      64.6     64.7 #> 9    45 k              100.    0.0132     100.     100."},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/dot-fitter_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"General-purpose optimization — .fitter_curve","title":"General-purpose optimization — .fitter_curve","text":"function .fitter_curve used internally find parameters requested.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/dot-fitter_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General-purpose optimization — .fitter_curve","text":"","code":".fitter_curve(data, id, fn, method, lower, upper, control, metadata, trace)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/dot-fitter_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General-purpose optimization — .fitter_curve","text":"data nested data.frame columns <plot, genotype, row, range, data, initials, fx_params>. id optional vector IDs filter data. Default NULL, meaning ids used. fn string specifying name function used curve fitting. Default \"fn_linear_sat\". method character vector specifying optimization methods used. See optimx package available methods. Default c(\"subplex\", \"pracmanm\", \"anms\"). lower Numeric vector specifying lower bounds parameters. Default -Inf parameters. upper Numeric vector specifying upper bounds parameters. Default Inf parameters. control list control parameters passed optimization function. example, list(maxit = 500). trace TRUE , convergence monitoring current fit reported console. FALSE default.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/dot-fitter_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"General-purpose optimization — .fitter_curve","text":"list containing following elements: kkopt opm object. param Data frame best solution parameters. rr Data frame methods tested. details Additional details best solution. hessian Hessian matrix. type Data frame describing type coefficient (estimable fixed) conv Convergency. p Number parameters estimated. n_obs Number observations. uid Unique identifier.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/dot-fitter_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"General-purpose optimization — .fitter_curve","text":"","code":"library(flexFitR) data(dt_potato) mod_1 <- dt_potato |>   modeler(     x = DAP,     y = GLI,     grp = Plot,     fn = \"fn_lin_pl_lin\",     parameters = c(t1 = 38.7, t2 = 62, t3 = 90, k = 0.32, beta = -0.01),     subset = 195,     options = list(add_zero = TRUE)   )"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/dt_potato.html","id":null,"dir":"Reference","previous_headings":"","what":"Drone-derived data from a potato breeding trial — dt_potato","title":"Drone-derived data from a potato breeding trial — dt_potato","text":"Canopy Green Leaf Index potato trial arranged p-rep design.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/dt_potato.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drone-derived data from a potato breeding trial — dt_potato","text":"","code":"dt_potato"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/dt_potato.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Drone-derived data from a potato breeding trial — dt_potato","text":"tibble 1372 rows 8 variables: Trial chr trial name Plot dbl denoting unique plot id Row dbl denoting row coordinate Range dbl denoting range coordinate gid chr denoting genotype id DAP dbl denoting Days planting Canopy dbl Canopy UAV-Derived GLI dbl Green Leaf Index UAV-Derived","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/dt_potato.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Drone-derived data from a potato breeding trial — dt_potato","text":"UW - Potato Breeding Program","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/explorer.html","id":null,"dir":"Reference","previous_headings":"","what":"Explore data — explorer","title":"Explore data — explorer","text":"Explores data data frame wide format.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/explorer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Explore data — explorer","text":"","code":"explorer(data, x, y, id, metadata)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/explorer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Explore data — explorer","text":"data `data.frame` containing input data analysis. x name column `data` contains x points. y names columns `data` contain variables analyzed. id names columns `data` contains grouping variable. metadata names columns `data` keep across analysis.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/explorer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Explore data — explorer","text":"object class explorer, list containing following elements: summ_vars data.frame containing summary statistics trait x point, including minimum, mean, median, maximum, standard deviation, coefficient variation, number non-missing values, percentage missing values, percentage negative values. summ_metadata data.frame summarizing metadata. locals_min_max data.frame containing local minima maxima mean y values x. dt_long data.frame long format, columns uid, metadata, var, x, y metadata character vector names variables keep across.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/explorer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Explore data — explorer","text":"function helps explore dataset analyzed modeler().","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/explorer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Explore data — explorer","text":"","code":"library(flexFitR) data(dt_potato) results <- dt_potato |>   explorer(     x = DAP,     y = c(Canopy, GLI),     id = Plot,     metadata = c(gid, Row, Range)   ) names(results) #> [1] \"summ_vars\"      \"summ_metadata\"  \"locals_min_max\" \"dt_long\"        #> [5] \"metadata\"       \"x_var\"          head(results$summ_vars) #> # A tibble: 6 × 12 #>   var        x    Min  Mean Median   Max    SD       CV     n  miss `miss%` #>   <chr>  <dbl>  <dbl> <dbl>  <dbl> <dbl> <dbl>    <dbl> <int> <int>   <dbl> #> 1 Canopy     0  0      0      0      0    0    NaN        196     0       0 #> 2 Canopy    29  0      0      0      0    0    NaN        196     0       0 #> 3 Canopy    36  0      2.95   1.84  15.1  3.22   1.09     196     0       0 #> 4 Canopy    42  0.763 23.4   22.9   46.2  9.31   0.398    196     0       0 #> 5 Canopy    56 32.5   75.2   75.0   98.6 12.3    0.163    196     0       0 #> 6 Canopy    76 89.1   99.7  100    100    1.04   0.0104   196     0       0 #> # ℹ 1 more variable: `neg%` <dbl> plot(results, label_size = 4, signif = TRUE, n_row = 2)  # New data format head(results$dt_long) #> # A tibble: 6 × 7 #>     uid gid         Row Range var        x         y #>   <dbl> <chr>     <dbl> <dbl> <chr>  <dbl>     <dbl> #> 1     1 W17037-24     1     1 Canopy     0  0        #> 2     1 W17037-24     1     1 GLI        0  0        #> 3     1 W17037-24     1     1 Canopy    29  0        #> 4     1 W17037-24     1     1 GLI       29  0.00272  #> 5     1 W17037-24     1     1 Canopy    36  0.67     #> 6     1 W17037-24     1     1 GLI       36 -0.000897"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/flexFitR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"flexFitR: Flexible Non-Linear Least Square Model Fitting — flexFitR-package","title":"flexFitR: Flexible Non-Linear Least Square Model Fitting — flexFitR-package","text":"Provides tools flexible non-linear least squares model fitting using general-purpose optimization techniques. package supports variety optimization algorithms, including provided 'optimx' package, making suitable handling complex non-linear models. Features include parallel processing support via 'future' 'foreach' packages, comprehensive model diagnostics, visualization capabilities. Implements methods described Nash Varadhan (2011, doi:10.18637/jss.v043.i09 ).","code":""},{"path":[]},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/flexFitR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"flexFitR: Flexible Non-Linear Least Square Model Fitting — flexFitR-package","text":"Maintainer: Johan Aparicio aparicioarce@wisc.edu Authors: Jeffrey Endelman endelman@wisc.edu contributors: University Wisconsin Madison [copyright holder]","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_exp1_exp.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponential exponential function 1 — fn_exp1_exp","title":"Exponential exponential function 1 — fn_exp1_exp","text":"Computes value based exponential growth curve exponential decay model time.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_exp1_exp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exponential exponential function 1 — fn_exp1_exp","text":"","code":"fn_exp1_exp(t, t1, t2, alpha, beta)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_exp1_exp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponential exponential function 1 — fn_exp1_exp","text":"t Numeric. time value. t1 Numeric. lower threshold time. Assumed known. t2 Numeric. upper threshold time. alpha Numeric. parameter first exponential term. Must greater 0. beta Numeric. parameter second exponential term. Must less 0.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_exp1_exp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exponential exponential function 1 — fn_exp1_exp","text":"numeric value based double exponential model. t less t1, function returns 0. t t1 t2 (inclusive), function returns exp(alpha * (t - t1)) - 1. t greater t2, function returns (exp(alpha * (t2 - t1)) - 1) * exp(beta * (t - t2)).","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_exp1_exp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exponential exponential function 1 — fn_exp1_exp","text":"$$ f(t; t_1, t_2, \\alpha, \\beta) = \\begin{cases} 0 & \\text{} t < t_1 \\\\ e^{\\alpha \\cdot (t - t_1)} - 1 & \\text{} t_1 \\leq t \\leq t_2 \\\\ \\left(e^{\\alpha \\cdot (t_2 - t_1)} - 1\\right) \\cdot e^{\\beta \\cdot (t - t_2)} & \\text{} t > t_2 \\end{cases} $$","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_exp1_exp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exponential exponential function 1 — fn_exp1_exp","text":"","code":"library(flexFitR) plot_fn(   fn = \"fn_exp1_exp\",   params = c(t1 = 35, t2 = 55, alpha = 1 / 20, beta = -1 / 30),   interval = c(0, 108),   n_points = 2000,   auc_label_size = 3,   y_auc_label = 0.2 )"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_exp1_lin.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponential linear function 1 — fn_exp1_lin","title":"Exponential linear function 1 — fn_exp1_lin","text":"Computes value based exponential growth curve linear decay model time.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_exp1_lin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exponential linear function 1 — fn_exp1_lin","text":"","code":"fn_exp1_lin(t, t1, t2, alpha, beta)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_exp1_lin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponential linear function 1 — fn_exp1_lin","text":"t Numeric. time value. t1 Numeric. lower threshold time. Assumed known. t2 Numeric. upper threshold time. alpha Numeric. parameter exponential term. Must greater 0. beta Numeric. parameter linear term. Must less 0.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_exp1_lin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exponential linear function 1 — fn_exp1_lin","text":"numeric value based exponential linear model. t less t1, function returns 0. t t1 t2 (inclusive), function returns exp(alpha * (t - t1)) - 1. t greater t2, function returns beta * (t - t2) + (exp(alpha * (t2 - t1)) - 1).","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_exp1_lin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exponential linear function 1 — fn_exp1_lin","text":"$$ f(t; t_1, t_2, \\alpha, \\beta) = \\begin{cases} 0 & \\text{} t < t_1 \\\\ e^{\\alpha \\cdot (t - t_1)} - 1 & \\text{} t_1 \\leq t \\leq t_2 \\\\ \\beta \\cdot (t - t_2) + \\left(e^{\\alpha \\cdot (t_2 - t_1)} - 1\\right) & \\text{} t > t_2 \\end{cases} $$","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_exp1_lin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exponential linear function 1 — fn_exp1_lin","text":"","code":"library(flexFitR) plot_fn(   fn = \"fn_exp1_lin\",   params = c(t1 = 35, t2 = 55, alpha = 1 / 20, beta = -1 / 40),   interval = c(0, 108),   n_points = 2000,   auc_label_size = 3 )"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_exp2_exp.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponential exponential Function 2 — fn_exp2_exp","title":"Exponential exponential Function 2 — fn_exp2_exp","text":"Computes value based exponential growth curve exponential decay model time.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_exp2_exp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exponential exponential Function 2 — fn_exp2_exp","text":"","code":"fn_exp2_exp(t, t1, t2, alpha, beta)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_exp2_exp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponential exponential Function 2 — fn_exp2_exp","text":"t Numeric. time value. t1 Numeric. lower threshold time. Assumed known. t2 Numeric. upper threshold time. alpha Numeric. parameter first exponential term. Must greater 0. beta Numeric. parameter second exponential term. Must less 0.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_exp2_exp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exponential exponential Function 2 — fn_exp2_exp","text":"numeric value based double exponential model. t less t1, function returns 0. t t1 t2 (inclusive), function returns exp(alpha * (t - t1)^2) - 1. t greater t2, function returns (exp(alpha * (t2 - t1)^2) - 1) * exp(beta * (t - t2)).","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_exp2_exp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exponential exponential Function 2 — fn_exp2_exp","text":"$$ f(t; t_1, t_2, \\alpha, \\beta) = \\begin{cases} 0 & \\text{} t < t_1 \\\\ e^{\\alpha \\cdot (t - t_1)^2} - 1 & \\text{} t_1 \\leq t \\leq t_2 \\\\ \\left(e^{\\alpha \\cdot (t_2 - t_1)^2} - 1\\right) \\cdot e^{\\beta \\cdot (t - t_2)} & \\text{} t > t_2 \\end{cases} $$","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_exp2_exp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exponential exponential Function 2 — fn_exp2_exp","text":"","code":"library(flexFitR) plot_fn(   fn = \"fn_exp2_exp\",   params = c(t1 = 35, t2 = 55, alpha = 1 / 600, beta = -1 / 30),   interval = c(0, 108),   n_points = 2000,   auc_label_size = 3,   y_auc_label = 0.15 )"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_exp2_lin.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponential linear function 2 — fn_exp2_lin","title":"Exponential linear function 2 — fn_exp2_lin","text":"Computes value based exponential growth curve linear decay model time.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_exp2_lin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exponential linear function 2 — fn_exp2_lin","text":"","code":"fn_exp2_lin(t, t1, t2, alpha, beta)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_exp2_lin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponential linear function 2 — fn_exp2_lin","text":"t Numeric. time value. t1 Numeric. lower threshold time. Assumed known. t2 Numeric. upper threshold time. alpha Numeric. parameter exponential term. Must greater 0. beta Numeric. parameter linear term. Must less 0.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_exp2_lin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exponential linear function 2 — fn_exp2_lin","text":"numeric value based exponential linear model. t less t1, function returns 0. t t1 t2 (inclusive), function returns exp(alpha * (t - t1)^2) - 1. t greater t2, function returns beta * (t - t2) + (exp(alpha * (t2 - t1)^2) - 1).","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_exp2_lin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exponential linear function 2 — fn_exp2_lin","text":"$$ f(t; t_1, t_2, \\alpha, \\beta) = \\begin{cases} 0 & \\text{} t < t_1 \\\\ e^{\\alpha \\cdot (t - t_1)^2} - 1 & \\text{} t_1 \\leq t \\leq t_2 \\\\ \\beta \\cdot (t - t_2) + \\left(e^{\\alpha \\cdot (t_2 - t_1)^2} - 1\\right) & \\text{} t > t_2 \\end{cases} $$","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_exp2_lin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exponential linear function 2 — fn_exp2_lin","text":"","code":"library(flexFitR) plot_fn(   fn = \"fn_exp2_lin\",   params = c(t1 = 35, t2 = 55, alpha = 1 / 600, beta = -1 / 80),   interval = c(0, 108),   n_points = 2000,   auc_label_size = 3 )"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_lin.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear function — fn_lin","title":"Linear function — fn_lin","text":"Computes value based linear function.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_lin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear function — fn_lin","text":"","code":"fn_lin(t, m, b)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_lin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear function — fn_lin","text":"t Numeric value. m Numeric value slope coefficient. b Numeric value intercept coefficient.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_lin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear function — fn_lin","text":"numeric value based linear function.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_lin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linear function — fn_lin","text":"$$ f(t; m, b) = m \\cdot t + b $$","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_lin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear function — fn_lin","text":"","code":"library(flexFitR) plot_fn(   fn = \"fn_lin\",   params = c(m = 2, b = 10),   interval = c(0, 108),   n_points = 2000 )"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_linear_sat.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear plateau function — fn_linear_sat","title":"Linear plateau function — fn_linear_sat","text":"Computes value based linear growth curve reaching plateau time.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_linear_sat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear plateau function — fn_linear_sat","text":"","code":"fn_linear_sat(t, t1 = 45, t2 = 80, k = 0.9)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_linear_sat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear plateau function — fn_linear_sat","text":"t Numeric. time value. t1 Numeric. lower threshold time. Default 45. t2 Numeric. upper threshold time. Default 80. k Numeric. maximum value function. Default 0.9. Assumed known.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_linear_sat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear plateau function — fn_linear_sat","text":"numeric value based threshold model. t less t1, function returns 0. t t1 t2 (inclusive), function returns value 0 k linear trend. t greater t2, function returns k.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_linear_sat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linear plateau function — fn_linear_sat","text":"$$ f(t; t_1, t_2, k) = \\begin{cases} 0 & \\text{} t < t_1 \\\\ \\dfrac{k}{t_2 - t_1} \\cdot (t - t_1) & \\text{} t_1 \\leq t \\leq t_2 \\\\ k & \\text{} t > t_2 \\end{cases} $$","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_linear_sat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear plateau function — fn_linear_sat","text":"","code":"library(flexFitR) plot_fn(   fn = \"fn_linear_sat\",   params = c(t1 = 34.9, t2 = 61.8, k = 100),   interval = c(0, 108),   n_points = 2000,   auc_label_size = 3 )"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_lin_pl_lin.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear plateau linear function — fn_lin_pl_lin","title":"Linear plateau linear function — fn_lin_pl_lin","text":"Linear plateau linear function","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_lin_pl_lin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear plateau linear function — fn_lin_pl_lin","text":"","code":"fn_lin_pl_lin(t, t1, t2, t3, k, beta)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_lin_pl_lin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear plateau linear function — fn_lin_pl_lin","text":"t Numeric. time value. t1 Numeric. lower threshold time. Default 45. t2 Numeric. upper threshold time plateau. Default 80. t3 Numeric. lower threshold time plateau. Default 45. k Numeric. maximum value function. Default 0.9. beta Numeric. Slope linear decay.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_lin_pl_lin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear plateau linear function — fn_lin_pl_lin","text":"numeric value based linear plateau linear model.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_lin_pl_lin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linear plateau linear function — fn_lin_pl_lin","text":"$$ f(t; t_1, t_2, t_3, k, \\beta) = \\begin{cases} 0 & \\text{} t < t_1 \\\\ \\dfrac{k}{t_2 - t_1} \\cdot (t - t_1) & \\text{} t_1 \\leq t \\leq t_2 \\\\ k & \\text{} t_2 \\leq t \\leq t_3 \\\\ k + \\beta \\cdot (t - t_3) & \\text{} t > t_3 \\end{cases} $$","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_lin_pl_lin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear plateau linear function — fn_lin_pl_lin","text":"","code":"library(flexFitR) plot_fn(   fn = \"fn_lin_pl_lin\",   params = c(t1 = 38.7, t2 = 62, t3 = 90, k = 0.32, beta = -0.01),   interval = c(0, 108),   n_points = 2000,   auc_label_size = 3 )"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_lin_pl_lin2.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear plateau linear with constrains — fn_lin_pl_lin2","title":"Linear plateau linear with constrains — fn_lin_pl_lin2","text":"Linear plateau linear constrains","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_lin_pl_lin2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear plateau linear with constrains — fn_lin_pl_lin2","text":"","code":"fn_lin_pl_lin2(t, t1, t2, dt, k, beta)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_lin_pl_lin2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear plateau linear with constrains — fn_lin_pl_lin2","text":"t Numeric. time value. t1 Numeric. lower threshold time. t2 Numeric. upper threshold time plateau. dt Numeric. dt = t3 - t2. k Numeric. maximum value function. beta Numeric. Slope linear decay.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_lin_pl_lin2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear plateau linear with constrains — fn_lin_pl_lin2","text":"numeric value based linear plateau linear model.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_lin_pl_lin2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linear plateau linear with constrains — fn_lin_pl_lin2","text":"$$ f(t; t_1, t_2, dt, k, \\beta) = \\begin{cases} 0 & \\text{} t < t_1 \\\\ \\dfrac{k}{t_2 - t_1} \\cdot (t - t_1) & \\text{} t_1 \\leq t \\leq t_2 \\\\ k & \\text{} t_2 \\leq t \\leq (t_2 + dt) \\\\ k + \\beta \\cdot (t - (t_2 + dt)) & \\text{} t > (t_2 + dt) \\end{cases} $$","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_lin_pl_lin2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear plateau linear with constrains — fn_lin_pl_lin2","text":"","code":"library(flexFitR) plot_fn(   fn = \"fn_lin_pl_lin2\",   params = c(t1 = 38.7, t2 = 62, dt = 28, k = 0.32, beta = -0.01),   interval = c(0, 108),   n_points = 2000,   auc_label_size = 3 )"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Logistic function — fn_logistic","title":"Logistic function — fn_logistic","text":"Computes value based logistic function.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logistic function — fn_logistic","text":"","code":"fn_logistic(t, L, k, t0)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logistic function — fn_logistic","text":"t Numeric value. L Numeric value. k Numeric value. t0 Numeric value.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_logistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logistic function — fn_logistic","text":"numeric value based logistic function.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_logistic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Logistic function — fn_logistic","text":"$$ f(t; L, k, t0) = \\frac{L}{1 + e^{-k(t - t_0)}} $$","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_logistic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logistic function — fn_logistic","text":"","code":"library(flexFitR) plot_fn(   fn = \"fn_logistic\",   params = c(L = 100, k = 0.199, t0 = 47.7),   interval = c(0, 108),   n_points = 2000 )"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_quad.html","id":null,"dir":"Reference","previous_headings":"","what":"Quadratic function — fn_quad","title":"Quadratic function — fn_quad","text":"Computes value based quadratic function..","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_quad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quadratic function — fn_quad","text":"","code":"fn_quad(t, a, b, c)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_quad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quadratic function — fn_quad","text":"t Numeric value. Numeric value coefficient . b Numeric value coefficient b. c Numeric value coefficient c.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_quad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quadratic function — fn_quad","text":"numeric value based linear function.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_quad.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quadratic function — fn_quad","text":"$$ f(t; , b, c) = \\cdot t^2 + b \\cdot t + c $$","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/fn_quad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quadratic function — fn_quad","text":"","code":"library(flexFitR) plot_fn(fn = \"fn_quad\", params = c(a = 1, b = 10, c = 5))"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/goodness_of_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Akaike's An Information Criterion for an object of class modeler — goodness_of_fit","title":"Akaike's An Information Criterion for an object of class modeler — goodness_of_fit","text":"Generic function calculating Akaike's ‘Information Criterion’ fitted model object class modeler.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/goodness_of_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Akaike's An Information Criterion for an object of class modeler — goodness_of_fit","text":"","code":"# S3 method for class 'modeler' AIC(object, ..., k = 2)  # S3 method for class 'modeler' BIC(object, ...)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/goodness_of_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Akaike's An Information Criterion for an object of class modeler — goodness_of_fit","text":"object object inheriting class modeler resulting executing function modeler() ... parameters. future improvements. k Numeric, penalty per parameter used; default k = 2 classical AIC.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/goodness_of_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Akaike's An Information Criterion for an object of class modeler — goodness_of_fit","text":"tibble columns giving corresponding AIC BIC.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/goodness_of_fit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Akaike's An Information Criterion for an object of class modeler — goodness_of_fit","text":"Johan Aparicio [aut]","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/goodness_of_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Akaike's An Information Criterion for an object of class modeler — goodness_of_fit","text":"","code":"library(flexFitR) dt <- data.frame(X = 1:6, Y = c(12, 16, 44, 50, 95, 100)) mo_1 <- modeler(dt, X, Y, fn = \"fn_lin\", param = c(m = 10, b = -5)) mo_2 <- modeler(dt, X, Y, fn = \"fn_quad\", param = c(a = 1, b = 10, c = 5)) AIC(mo_1) #>   uid    logLik df nobs p     AIC #> 1   1 -21.45745  3    6 2 48.9149 AIC(mo_2) #>   uid    logLik df nobs p      AIC #> 1   1 -21.00014  4    6 3 50.00028 BIC(mo_1) #>   uid    logLik df nobs p      BIC #> 1   1 -21.45745  3    6 2 48.29017 BIC(mo_2) #>   uid    logLik df nobs p      BIC #> 1   1 -21.00014  4    6 3 49.16732"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/list_funs.html","id":null,"dir":"Reference","previous_headings":"","what":"Print available functions in flexFitR — list_funs","title":"Print available functions in flexFitR — list_funs","text":"Print available functions flexFitR","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/list_funs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print available functions in flexFitR — list_funs","text":"","code":"list_funs()"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/list_funs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print available functions in flexFitR — list_funs","text":"vector available functions","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/list_funs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print available functions in flexFitR — list_funs","text":"","code":"library(flexFitR) list_funs() #>  [1] \"fn_lin\"         \"fn_quad\"        \"fn_logistic\"    \"fn_linear_sat\"  #>  [5] \"fn_lin_pl_lin\"  \"fn_lin_pl_lin2\" \"fn_exp1_exp\"    \"fn_exp1_lin\"    #>  [9] \"fn_exp2_exp\"    \"fn_exp2_lin\""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/list_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Print available methods in flexFitR — list_methods","title":"Print available methods in flexFitR — list_methods","text":"Print available methods flexFitR","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/list_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print available methods in flexFitR — list_methods","text":"","code":"list_methods(bounds = FALSE, check_package = FALSE)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/list_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print available methods in flexFitR — list_methods","text":"bounds TRUE, returns methods box (bounds) constraints. FALSE  default. check_package TRUE, ensures solvers installed. FALSE  default.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/list_methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print available methods in flexFitR — list_methods","text":"vector available methods","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/list_methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print available methods in flexFitR — list_methods","text":"","code":"library(flexFitR) list_methods() #>         stats         stats         stats         stats         stats  #>        \"BFGS\"          \"CG\" \"Nelder-Mead\"    \"L-BFGS-B\"         \"nlm\"  #>         stats      lbfgsb3c        optimx        optimx        optimx  #>      \"nlminb\"    \"lbfgsb3c\"      \"Rcgmin\"      \"Rtnmin\"      \"Rvmmin\"  #>        optimx        optimx            BB        ucminf         minqa  #>     \"snewton\"    \"snewtonm\"         \"spg\"      \"ucminf\"      \"newuoa\"  #>         minqa         minqa       dfoptim       dfoptim        optimx  #>      \"bobyqa\"      \"uobyqa\"        \"nmkb\"        \"hjkb\"         \"hjn\"  #>         lbfgs       subplex        optimx        optimx    marqLevAlg  #>       \"lbfgs\"     \"subplex\"         \"ncg\"         \"nvm\"         \"mla\"  #>        nloptr        nloptr        pracma        pracma        nloptr  #>       \"slsqp\"       \"tnewt\"        \"anms\"    \"pracmanm\"        \"nlnm\"  #>        optimx  #>      \"snewtm\""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/logLik.modeler.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Log-Likelihood for an object of class modeler — logLik.modeler","title":"Extract Log-Likelihood for an object of class modeler — logLik.modeler","text":"logLik object class modeler","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/logLik.modeler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Log-Likelihood for an object of class modeler — logLik.modeler","text":"","code":"# S3 method for class 'modeler' logLik(object, ...)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/logLik.modeler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Log-Likelihood for an object of class modeler — logLik.modeler","text":"object object inheriting class modeler resulting executing function modeler() ... parameters. future improvements.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/logLik.modeler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Log-Likelihood for an object of class modeler — logLik.modeler","text":"tibble Log-Likelihood fitted models.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/logLik.modeler.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract Log-Likelihood for an object of class modeler — logLik.modeler","text":"Johan Aparicio [aut]","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/logLik.modeler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Log-Likelihood for an object of class modeler — logLik.modeler","text":"","code":"library(flexFitR) dt <- data.frame(X = 1:6, Y = c(12, 16, 44, 50, 95, 100)) mo_1 <- modeler(dt, X, Y, fn = \"fn_lin\", param = c(m = 10, b = -5)) plot(mo_1)  logLik(mo_1) #>   uid    logLik df nobs p #> 1   1 -21.45745  3    6 2"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Metrics for an object of class modeler — metrics","title":"Metrics for an object of class modeler — metrics","text":"Computes various performance metrics modeler object. function calculates Sum Squared Errors (SSE), Mean Absolute Error (MAE), Mean Squared Error (MSE), Root Mean Squared Error (RMSE), Coefficient Determination (R-squared).","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metrics for an object of class modeler — metrics","text":"","code":"metrics(x, by_grp = TRUE)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metrics for an object of class modeler — metrics","text":"x object class `modeler` containing necessary data compute metrics. by_grp Return metrics id? TRUE default.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metrics for an object of class modeler — metrics","text":"data frame containing calculated metrics grouped uid, metadata, variables.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/metrics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Metrics for an object of class modeler — metrics","text":"Sum Squared Errors (SSE): $$SSE = \\sum_{=1}^{n} (y_i - \\hat{y}_i)^2$$Mean Absolute Error (MAE): $$MAE = \\frac{1}{n} \\sum_{=1}^{n} |y_i - \\hat{y}_i|$$Mean Squared Error (MSE): $$MSE = \\frac{1}{n} \\sum_{=1}^{n} (y_i - \\hat{y}_i)^2$$Root Mean Squared Error (RMSE): $$RMSE = \\sqrt{\\frac{1}{n} \\sum_{=1}^{n} (y_i - \\hat{y}_i)^2}$$Coefficient Determination (R-squared): $$R^2 = 1 - \\frac{\\sum_{=1}^{n} (y_i - \\hat{y}_i)^2}{\\sum_{=1}^{n} (y_i - \\bar{y})^2}$$","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metrics for an object of class modeler — metrics","text":"","code":"library(flexFitR) data(dt_potato) mod_1 <- dt_potato |>   modeler(     x = DAP,     y = Canopy,     grp = Plot,     fn = \"fn_linear_sat\",     parameters = c(t1 = 45, t2 = 80, k = 0.9),     subset = c(1:2)   ) plot(mod_1, id = c(1:2))  print(mod_1) #>  #> Call: #> Canopy ~ fn_linear_sat(DAP, t1, t2, k)  #>  #> Sum of Squares Error: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  0.4489  1.7619  3.0748  3.0748  4.3878  5.7008  #>  #> Optimization Results `head()`: #>  uid   t1   t2     k   sse #>    1 38.5 61.7  99.8 0.449 #>    2 35.1 61.1 100.0 5.701 #>  #> Metrics: #>  Groups      Timing Convergence Iterations #>       2 2.5238 secs        100% 461.5 (id) #>  metrics(mod_1) #> # A tibble: 2 × 8 #>     uid var      SSE    MAE    MSE  RMSE r_squared     n #>   <dbl> <chr>  <dbl>  <dbl>  <dbl> <dbl>     <dbl> <int> #> 1     1 Canopy 0.449 0.0838 0.0561 0.237      1.00     8 #> 2     2 Canopy 5.70  0.475  0.713  0.844      1.00     8"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/modeler.html","id":null,"dir":"Reference","previous_headings":"","what":"Modeler: Non-linear regression for curve fitting — modeler","title":"Modeler: Non-linear regression for curve fitting — modeler","text":"versatile function performing non-linear least squares optimization grouped data. supports customizable optimization methods, flexible initial/fixed parameters, parallel processing.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/modeler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modeler: Non-linear regression for curve fitting — modeler","text":"","code":"modeler(   data,   x,   y,   grp,   keep,   fn = \"fn_linear_sat\",   parameters = NULL,   lower = -Inf,   upper = Inf,   fixed_params = NULL,   method = c(\"subplex\", \"pracmanm\", \"anms\"),   subset = NULL,   options = modeler.options(),   control = list() )"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/modeler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modeler: Non-linear regression for curve fitting — modeler","text":"data `data.frame` containing input data analysis. x name column `data` representing independent variable (x points). y name column `data` containing dependent variable analyze (response variable). grp Column(s) `data` used grouping variable(s). Defaults `NULL`. (optional) keep Names columns retain output. Defaults `NULL`. (Optional) fn string. name function used curve fitting. Example: `\"fn_linear_sat\"`. Defaults \"fn_linear_sat\". parameters numeric vector, named list, `data.frame` providing initial values parameters: Numeric vector Named vector specifying initial values (e.g., `c(k = 0.5, t1 = 30)`). Data frame Requires `uid` column group IDs parameter values group. List Named list parameter values can numeric expressions (e.g., `list(k = \"max(y)\", t1 = 40)`). Defaults `NULL`. lower numeric vector specifying lower bounds parameters. Defaults `-Inf` parameters. upper numeric vector specifying upper bounds parameters. Defaults `Inf` parameters. fixed_params list `data.frame` fixing specific parameters: List Named list parameter values can numeric expressions (e.g., `list(k = \"max(y)\", t1 = 40)`). Data frame Requires `uid` column group IDs fixed parameter values. Defaults `NULL`. method character vector specifying optimization methods. Check available methods using list_methods() dependencies using optimx::checkallsolvers(). Defaults c(\"subplex\", \"pracmanm\", \"anms\"). subset vector (optional) containing levels `grp` filter data analysis. Defaults `NULL` (groups included). options list additional options. See `modeler.options()` progress Logical. TRUE progress bar displayed. Default FALSE. Try running function: progressr::handlers(\"progress\", \"beepr\"). parallel Logical. TRUE model fit performed parallel. Default FALSE. workers number parallel processes use. `parallel::detectCores()` trace TRUE , convergence monitoring current fit reported console. FALSE default. return_method Logical. TRUE, includes optimization method used result. Default FALSE. control list control parameters passed optimization function. example: list(maxit = 500).","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/modeler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modeler: Non-linear regression for curve fitting — modeler","text":"object class modeler, list containing following elements: param Data frame containing optimized parameters related information. dt Data frame input data, fitted values, residuals. fn function call used fitting models. metrics Metrics summary models. execution Total execution time analysis. response Name response variable analyzed. keep Metadata retained based `keep` argument. fun Name curve-fitting function used. parallel List containing parallel execution details (applicable). fit List fitted models group.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/modeler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modeler: Non-linear regression for curve fitting — modeler","text":"","code":"library(flexFitR) data(dt_potato) explorer <- explorer(dt_potato, x = DAP, y = c(Canopy, GLI), id = Plot) # Example 1 mod_1 <- dt_potato |>   modeler(     x = DAP,     y = GLI,     grp = Plot,     fn = \"fn_lin_pl_lin\",     parameters = c(t1 = 38.7, t2 = 62, t3 = 90, k = 0.32, beta = -0.01),     subset = 195   ) plot(mod_1, id = 195)  print(mod_1) #>  #> Call: #> GLI ~ fn_lin_pl_lin(DAP, t1, t2, t3, k, beta)  #>  #> Residuals: #>      Min.   1st Qu.    Median      Mean   3rd Qu.      Max.  #> -0.011076 -0.001003  0.000000 -0.001886  0.000000  0.000000  #>  #> Optimization Results `head()`: #>  uid   t1   t2   t3     k     beta      sse #>  195 40.1 63.1 91.4 0.325 -0.00809 0.000139 #>  #> Metrics: #>  Groups      Timing Convergence Iterations #>       1 1.3574 secs        100%  3156 (id) #>  # Example 2 mod_2 <- dt_potato |>   modeler(     x = DAP,     y = Canopy,     grp = Plot,     fn = \"fn_linear_sat\",     parameters = c(t1 = 45, t2 = 80, k = 0.9),     subset = 195   ) plot(mod_2, id = 195)  print(mod_2) #>  #> Call: #> Canopy ~ fn_linear_sat(DAP, t1, t2, k)  #>  #> Residuals: #>       Min.    1st Qu.     Median       Mean    3rd Qu.       Max.  #> -1.201e-09  0.000e+00  1.911e-10  1.031e-10  3.823e-10  8.791e-10  #>  #> Optimization Results `head()`: #>  uid   t1   t2   k      sse #>  195 38.8 61.6 100 2.65e-18 #>  #> Metrics: #>  Groups      Timing Convergence Iterations #>       1 0.9028 secs        100%   351 (id) #>"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/plot.explorer.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot an object of class explorer — plot.explorer","title":"Plot an object of class explorer — plot.explorer","text":"Creates various plots object class explorer. Depending specified type, function can generate plots show correlations variables x, correlations x values variable, evolution variables x.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/plot.explorer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot an object of class explorer — plot.explorer","text":"","code":"# S3 method for class 'explorer' plot(   x,   type = \"var_by_x\",   label_size = 4,   signif = FALSE,   method = \"pearson\",   filter_var = NULL,   id = NULL,   n_row = NULL,   n_col = NULL,   base_size = 13,   return_gg = FALSE,   add_avg = FALSE,   ... )"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/plot.explorer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot an object of class explorer — plot.explorer","text":"x object inheriting class explorer, resulting executing function explorer(). type Character string number specifying type plot generate. Available options : \"var_by_x\" 1 Plots correlations variables x (default). \"x_by_var\" 2 Plots correlations x points variable (y). \"evolution\" 3 Plot evolution variables (y) x. \"xy\" 4 Scatterplot (x, y) label_size Numeric. Size labels plot. Default 4. works type 1 2. signif Logical. TRUE, adds p-values correlation plot labels. Default FALSE. works type 1 2. method Character string specifying method correlation calculation. Available options \"pearson\" (default), \"spearman\", \"kendall\". works type 1 2. filter_var Character vector specifying variables exclude plot. id Optional unique identifier filter evolution type plot. Default NULL. works type 3. n_row Integer specifying number rows use facet_wrap(). Default NULL. works type 1 2. n_col Integer specifying number columns use facet_wrap(). Default NULL. works type 1 2. base_size Numeric. Base font size plot. Default 13. return_gg Logical. TRUE, returns ggplot object instead printing . Default FALSE. add_avg Logical. TRUE, returns evolution plot average trend across groups. Default FALSE. ... graphical parameters future improvements.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/plot.explorer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot an object of class explorer — plot.explorer","text":"ggplot object invisible data.frame containing correlation table type \"var_by_x\" \"x_by_var\".","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/plot.explorer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot an object of class explorer — plot.explorer","text":"","code":"library(flexFitR) data(dt_potato) results <- explorer(dt_potato, x = DAP, y = c(Canopy, GLI), id = Plot) table <- plot(results, label_size = 4, signif = TRUE, n_row = 2)  table #> # A tibble: 6 × 7 #>       x col    row    corr   p.value     n signi #>   <dbl> <fct>  <fct> <dbl>     <dbl> <dbl> <fct> #> 1    36 Canopy GLI    0.88 1.40e- 63   196 ***   #> 2    42 Canopy GLI    0.99 7.92e-179   196 ***   #> 3    56 Canopy GLI    0.93 1.80e- 85   196 ***   #> 4    76 Canopy GLI    0.54 3.66e- 16   196 ***   #> 5    92 Canopy GLI    0.31 1.25e-  5   196 ***   #> 6   100 Canopy GLI    0.13 6.09e-  2   196 ns    plot(results, type = \"x_by_var\", label_size = 4, signif = TRUE)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/plot.modeler.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot an object of class modeler — plot.modeler","title":"Plot an object of class modeler — plot.modeler","text":"Create several plots object class modeler","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/plot.modeler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot an object of class modeler — plot.modeler","text":"","code":"# S3 method for class 'modeler' plot(   x,   id = NULL,   type = 1,   label_size = 4,   base_size = 14,   color = \"red\",   color_points = \"black\",   parm = NULL,   n_points = 2000,   title = NULL,   add_ci = TRUE,   add_ribbon = FALSE,   color_ribbon = \"blue\",   color_ci = \"blue\",   color_pi = \"red\",   ... )"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/plot.modeler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot an object of class modeler — plot.modeler","text":"x object class modeler, typically result calling modeler(). id optional group ID filter data plotting, useful avoiding overcrowded plots. type Numeric value (1-6) specify type plot generate. Default 1. type = 1 Plot raw data fitted curves. type = 2 Plot coefficients confidence intervals. type = 3 Plot fitted curves, colored group. type = 4 Plot fitted curves confidence intervals. type = 5 Plot first derivative confidence intervals. type = 6 Plot second derivative confidence intervals. label_size Numeric value size labels. Default 4. base_size Numeric value base font size pts. Default 14. color Character string specifying color fitted line type = 1. Default \"red\". color_points Character string specifying color raw data points type = 1. Default \"black\". parm Character vector specifying parameters plot type = 2. NULL, parameters included. n_points Numeric value specifying number points interpolation along x-axis. Default 2000. title Optional character string add title plot. add_ci Logical value indicating whether add confidence intervals type = 4, 5, 6. Default TRUE. add_ribbon Logical value indicating whether add ribbon confidence intervals type = 4, 5, 6. Default FALSE. color_ribbon Character string specifying color ribbon. Default \"blue\". color_ci Character string specifying color confidence interval type = 4, 5, 6. Default \"blue\". color_pi Character string specifying color prediction interval type = 4. Default \"red\". ... Additional graphical parameters future extensions.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/plot.modeler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot an object of class modeler — plot.modeler","text":"ggplot object representing specified plot.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/plot.modeler.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot an object of class modeler — plot.modeler","text":"Johan Aparicio [aut]","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/plot.modeler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot an object of class modeler — plot.modeler","text":"","code":"library(flexFitR) data(dt_potato) # Example 1 mod_1 <- dt_potato |>   modeler(     x = DAP,     y = Canopy,     grp = Plot,     fn = \"fn_linear_sat\",     parameters = c(t1 = 45, t2 = 80, k = 0.9),     subset = c(1:3)   ) print(mod_1) #>  #> Call: #> Canopy ~ fn_linear_sat(DAP, t1, t2, k)  #>  #> Sum of Squares Error: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  0.4489  2.1038  3.7587  3.3028  4.7297  5.7008  #>  #> Optimization Results `head()`: #>  uid   t1   t2     k   sse #>    1 38.5 61.7  99.8 0.449 #>    2 35.1 61.1 100.0 5.701 #>    3 33.7 60.0 100.0 3.759 #>  #> Metrics: #>  Groups      Timing Convergence  Iterations #>       3 3.1222 secs        100% 502.33 (id) #>  plot(mod_1, id = 1:2)  plot(mod_1, id = 1:3, type = 2, label_size = 10)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/plot_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot user-defined function — plot_fn","title":"Plot user-defined function — plot_fn","text":"function plots function specified interval annotates plot calculated Area Curve (AUC) parameter values. aim `plot_fn` allow users play different starting values functions fitting models.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/plot_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot user-defined function — plot_fn","text":"","code":"plot_fn(   fn = \"fn_linear_sat\",   params = c(t1 = 34.9, t2 = 61.8, k = 100),   interval = c(0, 100),   n_points = 1000,   auc = FALSE,   x_auc_label = NULL,   y_auc_label = NULL,   auc_label_size = 4,   param_label_size = 4,   base_size = 12,   color = \"red\",   label_color = \"grey30\" )"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/plot_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot user-defined function — plot_fn","text":"fn character string representing name function plotted. Default \"fn_linear_sat\". params named numeric vector parameters passed function. Default c(t1 = 34.9, t2 = 61.8, k = 100). interval numeric vector length 2 specifying interval function plotted. Default c(0, 100). n_points integer specifying number points used plotting. Default 1000. auc Print AUC plot? Default FALSE. x_auc_label numeric value specifying x-coordinate AUC label. Default NULL. y_auc_label numeric value specifying y-coordinate AUC label. Default NULL. auc_label_size numeric value specifying size AUC label text. Default 3. param_label_size numeric value specifying size parameter label text. Default 3. base_size numeric value specifying base size plot's theme. Default 12. color character string specifying color plot lines area fill. Default \"red\". label_color character string specifying color labels. Default \"grey30\".","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/plot_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot user-defined function — plot_fn","text":"ggplot object representing plot.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/plot_fn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot user-defined function — plot_fn","text":"","code":"# Example usage plot_fn(   fn = \"fn_linear_sat\",   params = c(t1 = 34.9, t2 = 61.8, k = 100),   interval = c(0, 100),   n_points = 1000 )  plot_fn(   fn = \"fn_lin_pl_lin\",   params <- c(t1 = 38.7, t2 = 62, t3 = 90, k = 0.32, beta = -0.01),   interval = c(0, 100),   n_points = 1000,   base_size = 12 )"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/predict.modeler.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict an object of class modeler — predict.modeler","title":"Predict an object of class modeler — predict.modeler","text":"Generate model predictions object class modeler. function allows flexible prediction types, including point predictions, area curve (AUC), first second order derivatives, functions parameters.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/predict.modeler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict an object of class modeler — predict.modeler","text":"","code":"# S3 method for class 'modeler' predict(   object,   x = NULL,   id = NULL,   type = c(\"point\", \"auc\", \"fd\", \"sd\"),   se_interval = c(\"confidence\", \"prediction\"),   n_points = 1000,   formula = NULL,   metadata = FALSE,   ... )"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/predict.modeler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict an object of class modeler — predict.modeler","text":"object object class modeler, typically result calling modeler() function. x numeric value vector specifying points predictions made. type = \"auc\", x must vector length 2 specifies interval calculate AUC. id Optional unique identifier filter predictions specific group. Default NULL. type character string specifying type prediction. Default \"point\". \"point\" Predicts value y given x. \"auc\" Calculates area curve (AUC) fitted model interval specified x. \"fd\" Returns first derivative (rate change) model given x value(s). \"sd\" Returns second derivative model given x value(s). se_interval character string specifying type interval standard error calculation. Options \"confidence\" (default) \"prediction\". works \"point\" estimation. n_points integer specifying number points used approximate area curve (AUC) type = \"auc\". Default 1000. formula formula specifying function parameters estimated (e.g., ~ b * 500). Default NULL. metadata Logical. TRUE, metadata included predictions. Default FALSE. ... Additional parameters future functionality.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/predict.modeler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict an object of class modeler — predict.modeler","text":"data.frame containing predicted values, associated standard errors, optionally metadata.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/predict.modeler.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predict an object of class modeler — predict.modeler","text":"Johan Aparicio [aut]","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/predict.modeler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict an object of class modeler — predict.modeler","text":"","code":"library(flexFitR) data(dt_potato) mod_1 <- dt_potato |>   modeler(     x = DAP,     y = Canopy,     grp = Plot,     fn = \"fn_linear_sat\",     parameters = c(t1 = 45, t2 = 80, k = 0.9),     subset = c(15, 2, 45)   ) print(mod_1) #>  #> Call: #> Canopy ~ fn_linear_sat(DAP, t1, t2, k)  #>  #> Sum of Squares Error: #>     Min.  1st Qu.   Median     Mean  3rd Qu.     Max.  #> 0.002601 0.459153 0.915706 2.206356 3.308233 5.700760  #>  #> Optimization Results `head()`: #>  uid   t1   t2     k    sse #>    2 35.1 61.1 100.0 5.7008 #>   15 38.4 70.1  99.7 0.9157 #>   45 38.3 64.7 100.0 0.0026 #>  #> Metrics: #>  Groups      Timing Convergence Iterations #>       3 3.1631 secs        100%   349 (id) #>  # Point Prediction predict(mod_1, x = 45, type = \"point\", id = 2) #> # A tibble: 1 × 4 #>     uid x_new predicted.value std.error #>   <dbl> <dbl>           <dbl>     <dbl> #> 1     2    45            38.0     0.618 # AUC Prediction predict(mod_1, x = c(0, 108), type = \"auc\", id = 2) #> # A tibble: 1 × 5 #>     uid x_min x_max predicted.value std.error #>   <dbl> <dbl> <dbl>           <dbl>     <dbl> #> 1     2     0   108           5990.      33.7 # First Derivative predict(mod_1, x = 45, type = \"fd\", id = 2) #> # A tibble: 1 × 4 #>     uid x_new predicted.value std.error #>   <dbl> <dbl>           <dbl>     <dbl> #> 1     2    45            3.85    0.0738 # Second Derivative predict(mod_1, x = 45, type = \"sd\", id = 2) #> # A tibble: 1 × 4 #>     uid x_new predicted.value std.error #>   <dbl> <dbl>           <dbl>     <dbl> #> 1     2    45               0 0.0000240 # Function of the parameters predict(mod_1, formula = ~ t2 - t1, id = 2) #> # A tibble: 1 × 4 #>     uid formula predicted.value std.error #>   <dbl> <chr>             <dbl>     <dbl> #> 1     2 t2 - t1            26.0     0.522"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/print.modeler.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an object of class modeler — print.modeler","title":"Print an object of class modeler — print.modeler","text":"Prints information modeler function.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/print.modeler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an object of class modeler — print.modeler","text":"","code":"# S3 method for class 'modeler' print(x, ...)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/print.modeler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an object of class modeler — print.modeler","text":"x object fitted function modeler(). ... Options used tibble package format output. See `tibble::print()` details.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/print.modeler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print an object of class modeler — print.modeler","text":"object inheriting class modeler.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/print.modeler.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print an object of class modeler — print.modeler","text":"Johan Aparicio [aut]","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/print.modeler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print an object of class modeler — print.modeler","text":"","code":"library(flexFitR) data(dt_potato) mod_1 <- dt_potato |>   modeler(     x = DAP,     y = Canopy,     grp = Plot,     fn = \"fn_linear_sat\",     parameters = c(t1 = 45, t2 = 80, k = 0.9),     subset = c(1:5)   ) plot(mod_1, id = c(1:4))  print(mod_1) #>  #> Call: #> Canopy ~ fn_linear_sat(DAP, t1, t2, k)  #>  #> Sum of Squares Error: #>     Min.  1st Qu.   Median     Mean  3rd Qu.     Max.  #> 0.000000 0.000049 0.448900 1.981675 3.758663 5.700760  #>  #> Optimization Results `head()`: #>  uid   t1   t2     k      sse #>    1 38.5 61.7  99.8 4.49e-01 #>    2 35.1 61.1 100.0 5.70e+00 #>    3 33.7 60.0 100.0 3.76e+00 #>    4 39.3 66.0  99.8 1.46e-18 #>  #> Metrics: #>  Groups      Timing Convergence Iterations #>       5 5.2938 secs        100% 443.4 (id) #>"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/series_mutate.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform variables in a data frame — series_mutate","title":"Transform variables in a data frame — series_mutate","text":"function performs transformations specified columns data frame, including truncating maximum values, handling negative values, adding zero series. allows grouping supports retaining metadata output.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/series_mutate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform variables in a data frame — series_mutate","text":"","code":"series_mutate(   data,   x,   y,   grp,   metadata,   max_as_last = FALSE,   check_negative = FALSE,   add_zero = FALSE,   interval = NULL )"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/series_mutate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform variables in a data frame — series_mutate","text":"data `data.frame` containing input data analysis. x name column `data` representing independent variable (x points). y name column(s) `data` containing variables transform. grp Column(s) `data` used grouping variable(s). Defaults `NULL` (optional). metadata Names columns retain output. Defaults `NULL` (optional). max_as_last Logical. `TRUE`, appends maximum value reaching maximum. Default `FALSE`. check_negative Logical. `TRUE`, converts negative values data zero. Default `FALSE`. add_zero Logical. `TRUE`, adds zero value series start. Default `FALSE`. interval numeric vector length 2 (start end) specifying range filter data. Defaults `NULL`.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/series_mutate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform variables in a data frame — series_mutate","text":"transformed `data.frame` specified modifications applied.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/series_mutate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform variables in a data frame — series_mutate","text":"","code":"data(dt_potato) new_data <- series_mutate(   data = dt_potato,   x = DAP,   y = GLI,   grp = gid,   max_as_last = TRUE,   check_negative = TRUE )"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/vcov.modeler.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance-Covariance matrix for an object of class modeler — vcov.modeler","title":"Variance-Covariance matrix for an object of class modeler — vcov.modeler","text":"Extract variance-covariance matrix parameter estimates object class modeler.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/vcov.modeler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance-Covariance matrix for an object of class modeler — vcov.modeler","text":"","code":"# S3 method for class 'modeler' vcov(object, id = NULL, ...)"},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/vcov.modeler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance-Covariance matrix for an object of class modeler — vcov.modeler","text":"object object class modeler, typically result calling modeler() function. id optional unique identifier filter specific group. Default NULL. ... Additional parameters future functionality.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/vcov.modeler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance-Covariance matrix for an object of class modeler — vcov.modeler","text":"list matrices, matrix represents variance-covariance matrix estimated parameters group fit.","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/vcov.modeler.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Variance-Covariance matrix for an object of class modeler — vcov.modeler","text":"Johan Aparicio [aut]","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/reference/vcov.modeler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variance-Covariance matrix for an object of class modeler — vcov.modeler","text":"","code":"library(flexFitR) data(dt_potato) mod_1 <- dt_potato |>   modeler(     x = DAP,     y = Canopy,     grp = Plot,     fn = \"fn_linear_sat\",     parameters = c(t1 = 45, t2 = 80, k = 0.9),     subset = c(15, 2, 45)   ) print(mod_1) #>  #> Call: #> Canopy ~ fn_linear_sat(DAP, t1, t2, k)  #>  #> Sum of Squares Error: #>     Min.  1st Qu.   Median     Mean  3rd Qu.     Max.  #> 0.002601 0.459153 0.915706 2.206356 3.308233 5.700760  #>  #> Optimization Results `head()`: #>  uid   t1   t2     k    sse #>    2 35.1 61.1 100.0 5.7008 #>   15 38.4 70.1  99.7 0.9157 #>   45 38.3 64.7 100.0 0.0026 #>  #> Metrics: #>  Groups     Timing Convergence Iterations #>       3 2.868 secs        100%   349 (id) #>  vcov(mod_1) #> $`2` #>               t1          t2            k #> t1  5.934998e-02 -0.03183713 5.554242e-06 #> t2 -3.183713e-02  0.14965142 9.863943e-02 #> k   5.554242e-06  0.09863943 3.800529e-01 #>  #> $`15` #>               t1          t2            k #> t1  3.082693e-02 -0.03338909 8.560489e-07 #> t2 -3.338909e-02  0.10016820 1.945368e-02 #> k   8.560489e-07  0.01945368 6.104608e-02 #>  #> $`45` #>               t1            t2            k #> t1  6.081675e-05 -4.407386e-05 7.269796e-11 #> t2 -4.407386e-05  1.208133e-04 4.577090e-05 #> k   7.269796e-11  4.577090e-05 1.734000e-04 #>"},{"path":[]},{"path":"https://apariciojohan.github.io/flexFitR/dev/news/index.html","id":"flexfitr-100","dir":"Changelog","previous_headings":"","what":"flexFitR 1.0.0","title":"flexFitR 1.0.0","text":"CRAN release: 2025-01-20","code":""},{"path":"https://apariciojohan.github.io/flexFitR/dev/news/index.html","id":"flexfitr-010","dir":"Changelog","previous_headings":"","what":"flexFitR 0.1.0","title":"flexFitR 0.1.0","text":"Initial CRAN submission.","code":""}]
